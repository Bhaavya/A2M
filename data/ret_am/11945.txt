{"src_spec_res": [[{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "name": "<b>Minimax</b> Algorithm. When we play games <b>like</b> <b>chess</b>, tic tac\u2026 | by Rediet ...", "url": "https://rediet-abere.medium.com/minimax-algorithm-aa1457521fc7", "isFamilyFriendly": true, "displayUrl": "https://rediet-abere.medium.com/<b>minimax</b>-algorithm-aa1457521fc7", "snippet": "When we play games <b>like</b> <b>chess</b>, tic tac toe, or mancala against a computer, the computer can make its move by using a decision tree AKA a game tree. This tree follows a set of instructions known as the <b>Minimax</b> Algorithm. Take a look at a compacted definition from Wikipedia: <b>Minimax</b> is a decision rule used for minimizing the possible <b>loss</b> for a worst case (maximum <b>loss</b>) scenario. Originally formulated for two-player zero-sum game theory, covering both the cases where players take alternate ...", "dateLastCrawled": "2022-01-20T08:28:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.1", "name": "Is <b>Minimax</b> Good For <b>Chess</b>? \u2013 ameliadanver.com", "url": "https://ameliadanver.com/is-minimax-good-for-chess/", "isFamilyFriendly": true, "displayUrl": "https://ameliadanver.com/is-<b>minimax</b>-good-for-<b>chess</b>", "snippet": "What algorithms do <b>chess</b> AI use? The core of the <b>chess</b> <b>playing</b> algorithm is a local min-max search of the gamespace. (or &quot;ply&quot; as it&#39;s as its referred to in computer <b>chess</b> terminology), all possible moves are examined, and the static board evaluation function is used to determine the score at the leafs of the search tree. Related advise for Is <b>Minimax</b> Good For <b>Chess</b>? Why we need \u03b1 \u03b2 pruning in game theory? The benefit of alpha\u2013beta pruning lies in the fact that branches of the search ...", "dateLastCrawled": "2022-02-01T10:07:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.2", "name": "What Type Of Algorithm Is <b>Minimax</b>? \u2013 chetumenu.com", "url": "https://chetumenu.com/what-type-of-algorithm-is-minimax/", "isFamilyFriendly": true, "displayUrl": "https://chetumenu.com/what-type-of-algorithm-is-<b>minimax</b>", "snippet": "<b>Minimax</b> is a strategy of always minimizing the maximum possible <b>loss</b> which can result from a choice that a player makes. What is MIN MAX algorithm used for? Min-Max algorithm is mostly used for game <b>playing</b> in AI. Such as <b>Chess</b>, Checkers, tic-tac-toe, go, and various tow-players game. This Algorithm computes the <b>minimax</b> decision for the current ...", "dateLastCrawled": "2022-01-22T12:12:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.3", "name": "<b>Minimax</b> Algorithm in Game Theory | Set 1 (Introduction) - GeeksforGeeks", "url": "https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-1-introduction/", "isFamilyFriendly": true, "displayUrl": "https://www.geeksforgeeks.org/<b>minimax</b>-algorithm-in-game-theory-set-1-introduction", "snippet": "<b>Minimax</b> is a kind of backtracking algorithm that is used in decision making and game theory to find the optimal move for a player, assuming that your opponent also plays optimally. It is widely used in two player turn-based games such as Tic-Tac-Toe, Backgammon, Mancala, <b>Chess</b>, etc. In <b>Minimax</b> the two players are called maximizer and minimizer. The maximizer tries to get the highest score possible while the minimizer tries to do the opposite and get the lowest score possible. Every board ...", "dateLastCrawled": "2022-02-02T13:21:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.4", "name": "<b>Minimax Algorithm in Game Theory</b> | Set 3 (Tic-Tac-Toe AI - Finding ...", "url": "https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-3-tic-tac-toe-ai-finding-optimal-move/", "isFamilyFriendly": true, "displayUrl": "https://www.geeksforgeeks.org/<b>minimax-algorithm-in-game-theory</b>-set-3-tic-tac-toe-ai...", "snippet": "The code for the maximizer and minimizer in the <b>minimax</b>() ... it might choose to make a move which will result in a slower victory or a faster <b>loss</b>. Lets take an example and explain it. Assume that there are 2 possible ways for X to win the game from a give board state. Move A: X can win in 2 move; Move B: X can win in 4 moves. Our evaluation function will return a value of +10 for both moves A and B. Even though the move A is better because it ensures a faster victory, our AI may choose B ...", "dateLastCrawled": "2022-02-02T10:19:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.5", "name": "<b>Minimax Algorithm Guide: How to Create</b> an Unbeatable AI", "url": "https://www.freecodecamp.org/news/minimax-algorithm-guide-how-to-create-an-unbeatable-ai/", "isFamilyFriendly": true, "displayUrl": "https://www.freecodecamp.org/news/<b>minimax-algorithm-guide-how-to-create</b>-an-unbeatable-ai", "snippet": "However, you can also use it for complex games, <b>like</b> <b>chess</b>, and general decision-making to resolve any uncertainties. In most cases, the player that initially invokes <b>minimax</b> is called the maximizing player. In other words, the original invocator of <b>minimax</b> is the player that wants to maximize any opportunity to win the game.", "dateLastCrawled": "2022-01-26T04:14:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.6", "name": "Optimizing Decision-making with the <b>Minimax</b> AI algorithm | by Shukant ...", "url": "https://medium.com/swlh/optimizing-decision-making-with-the-minimax-ai-algorithm-69cce500c6d6", "isFamilyFriendly": true, "displayUrl": "https://medium.com/swlh/optimizing-decision-making-with-the-<b>minimax</b>-ai-algorithm-69cce...", "snippet": "This algorithm is useful in decision-making AI, which is used in popular game engines, <b>like</b> Stockfish for <b>Chess</b>. A major limitation of <b>Minimax</b> is that it is only used in two-player games.", "dateLastCrawled": "2022-01-30T12:46:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.7", "name": "How <b>Chess</b> Is Solved Using AI - by Vinay Kumar Paspula", "url": "https://vinaypaspula.substack.com/p/how-chess-was-solved-using-ai-baa9b6fe2af0", "isFamilyFriendly": true, "displayUrl": "https://vinaypaspula.substack.com/p/how-<b>chess</b>-was-solved-using-ai-baa9b6fe2af0", "snippet": "<b>Chess</b> systems typically use a modified version of game-tree search by performing only a shallow search of the game tree using <b>minimax</b> with alpha- beta pruning. While not intuitive, moves that result in smaller scores (gain or <b>loss</b>) are sometimes chosen that can improve the overall board position rather than a short-term gain.", "dateLastCrawled": "2022-01-16T08:32:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.8", "name": "<b>Minimax Improvements</b> - blog.theofekfoundation.org", "url": "https://blog.theofekfoundation.org/artificial-intelligence/2015/12/18/minimax-improvements/", "isFamilyFriendly": true, "displayUrl": "https://blog.theofekfoundation.org/artificial-intelligence/2015/12/18/<b>minimax-improvements</b>", "snippet": "While they might not all apply to all games, they may apply to general zero-sum games, <b>like</b> <b>chess</b>, connect four, checkers, etc\u2026 Note that most of these improvements are very game-specific. Irrelevant Moves . In some zero-sum games, there are moves that can be skipped in the <b>Minimax</b> process. For example, in gomoku or othello, <b>playing</b> in squares that are not close to other pieces on the board would be bad moves, and thus can be skipped without resulting in a <b>loss</b> of skill. Limit the Number ...", "dateLastCrawled": "2022-01-11T10:16:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.9", "name": "<b>What is Minimax algorithm in AI? - Quora</b>", "url": "https://www.quora.com/What-is-Minimax-algorithm-in-AI", "isFamilyFriendly": true, "displayUrl": "https://www.quora.com/<b>What-is-Minimax-algorithm-in-AI</b>", "snippet": "Answer (1 of 2): <b>Minimax</b> is a recursive game <b>playing</b> algorithm from classical (non-learning) AI that works as follows: given a set of moves available at the current position, take the one which maximizes your utility. This utility is calculated by assuming the opponent will always take the action...", "dateLastCrawled": "2022-01-23T05:21:00.0000000Z", "language": "en", "isNavigational": false}], [{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "contractualRules": [{"_type": "ContractualRules/LicenseAttribution", "targetPropertyName": "snippet", "targetPropertyIndex": 0, "mustBeCloseToContent": true, "license": {"name": "CC-BY-SA", "url": "http://creativecommons.org/licenses/by-sa/3.0/"}, "licenseNotice": "Text under CC-BY-SA license"}], "name": "<b>Minimax</b> - <b>Wikipedia</b>", "url": "https://en.wikipedia.org/wiki/Minimax", "isFamilyFriendly": true, "displayUrl": "https://<b>en.wikipedia.org</b>/wiki/<b>Minimax</b>", "snippet": "<b>Minimax</b> (sometimes MinMax, MM or saddle point) is a decision rule used in artificial intelligence, decision theory, game theory, statistics, and philosophy for minimizing the possible <b>loss</b> for a worst case (maximum <b>loss</b>) scenario.When dealing with gains, it is referred to as &quot;maximin&quot;\u2014to maximize the minimum gain. Originally formulated for n-player zero-sum game theory, covering both the cases where players take alternate moves and those where they make simultaneous moves, it has also been ...", "dateLastCrawled": "2022-02-03T03:19:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.1", "name": "Trappy <b>Minimax</b> in <b>chess</b>, and the elusive meaning of \u201cbest move\u201d", "url": "https://athena.ecs.csus.edu/~gordonvs/papers/TMM.pdf", "isFamilyFriendly": true, "displayUrl": "https://athena.ecs.csus.edu/~gordonvs/papers/TMM.pdf", "snippet": "Trappy <b>Minimax</b> in <b>chess</b>, ... <b>Minimax</b> always chooses the 8-move <b>loss</b> because it is the slowest, even if it is also the easiest for the opponent to execute. (iv) Player A is a computer, and is <b>playing</b> against human player B. The two combatants are in an endgame, and the computer (player A) has analyzed every variation to completion. That is, the computer is working with perfect and complete information. Every move leads to a draw with best play. However, one of the moves requires the human to ...", "dateLastCrawled": "2021-09-02T13:59:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.2", "name": "<b>Artificial Intelligence</b> | <b>Mini-Max</b> Algorithm - <b>Javatpoint</b>", "url": "https://www.javatpoint.com/mini-max-algorithm-in-ai", "isFamilyFriendly": true, "displayUrl": "https://www.<b>javatpoint</b>.com/<b>mini-max</b>-algorithm-in-ai", "snippet": "Min-Max algorithm is mostly used for game <b>playing</b> in AI. Such as <b>Chess</b>, Checkers, tic-tac-toe, go, and various tow-players game. This Algorithm computes the <b>minimax</b> decision for the current state. In this algorithm two players play the game, one is called MAX and other is called MIN. Both the players fight it as the opponent player gets the minimum benefit while they get the maximum benefit. Both Players of the game are opponent of each other, where MAX will select the maximized value and ...", "dateLastCrawled": "2022-02-02T07:01:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.3", "name": "<b>Minimax</b> and alpha-beta pruning", "url": "https://web.cse.ohio-state.edu/~barker.348/cse3521_su19/minimaxAB.pdf", "isFamilyFriendly": true, "displayUrl": "https://web.cse.ohio-state.edu/~barker.348/cse3521_su19/<b>minimax</b>AB.pdf", "snippet": "\u2022 Game <b>playing</b> is idealization of worlds in which hostile agents act so as to diminish one\u2019s well-being! \u2013 Games problems are like real world problems \u2022 Classic AI games \u2013 Deterministic, turn-taking, two-player, perfect information. 4 Classic AI Games \u2022 State of game easy to represent \u2022 Agents usually restricted to fairly small number of well-defined actions \u2022 Opponent introduces uncertainty \u2022 Games usually much too hard to solve \u2013 <b>Chess</b> \u2022 Branching factor 35 \u2022 Often ...", "dateLastCrawled": "2022-02-03T17:01:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.4", "name": "Game <b>Playing</b> - <b>Chess</b> &amp; Checkers, <b>Minimax</b> and Alpha Beta cutoff", "url": "https://www.openbookproject.net/py4fun/minimax/minimax.html", "isFamilyFriendly": true, "displayUrl": "https://www.openbookproject.net/py4fun/<b>minimax</b>/<b>minimax</b>.html", "snippet": "Game <b>Playing</b> - <b>Chess</b> &amp; Checkers: <b>Minimax</b> and Alpha Beta cutoff. Games like <b>chess</b> and checkers (droughts), and even the lowly tic-tac-toe (naughts and crosses) have a <b>similar</b> structure. There is board and game play alternates between two players who decide on (what they perceive) is their best move and take it. To do this they must each evaluate the board and find a move that makes the evaluation more favorable for them. There is no rolling of dice or other element of chance. Each game has ...", "dateLastCrawled": "2022-01-31T10:12:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.5", "name": "<b>Minimax</b> Algorithm in Game Theory | Set 1 (Introduction) - GeeksforGeeks", "url": "https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-1-introduction/", "isFamilyFriendly": true, "displayUrl": "https://www.geeksforgeeks.org/<b>minimax</b>-algorithm-in-game-theory-set-1-introduction", "snippet": "<b>Minimax</b> is a kind of backtracking algorithm that is used in decision making and game theory to find the optimal move for a player, assuming that your opponent also plays optimally. It is widely used in two player turn-based games such as Tic-Tac-Toe, Backgammon, Mancala, <b>Chess</b>, etc. In <b>Minimax</b> the two players are called maximizer and minimizer. The maximizer tries to get the highest score possible while the minimizer tries to do the opposite and get the lowest score possible. Every board ...", "dateLastCrawled": "2022-02-02T13:21:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.6", "name": "<b>Playing Strategy Games With</b> The <b>Minimax</b> Algorithm", "url": "https://www.freecodecamp.org/news/playing-strategy-games-with-minimax-4ecb83b39b4b/", "isFamilyFriendly": true, "displayUrl": "https://www.freecodecamp.org/news/<b>playing-strategy-games-with</b>-<b>minimax</b>-4ecb83b39b4b", "snippet": "But <b>minimax</b> can only know either players\u2019 advantage if it knows the paths in the tree that lead to a victory for either player. This means <b>minimax</b> must traverse to the very bottom of the tree for every possible series of moves. Next, it has to assign some score (e.g., +1 for a win and -1 for a <b>loss</b>), and propagate those numbers up through the ...", "dateLastCrawled": "2022-02-03T01:22:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.7", "name": "<b>Minimax Algorithm Guide: How to Create</b> an Unbeatable AI", "url": "https://www.freecodecamp.org/news/minimax-algorithm-guide-how-to-create-an-unbeatable-ai/", "isFamilyFriendly": true, "displayUrl": "https://www.freecodecamp.org/news/<b>minimax-algorithm-guide-how-to-create</b>-an-unbeatable-ai", "snippet": "If you are also on a <b>similar</b> path, let me take you through the steps to build an unbeatable AI (Artificial Intelligence). Step 1: Understand the basics of the <b>minimax</b> algorithm. A <b>minimax</b> algorithm is a recursive program written to find the best gameplay that minimizes any tendency to lose a game while maximizing any opportunity to win the game. Graphically, we can represent <b>minimax</b> as an exploration of a game tree&#39;s nodes to discover the best game move to make. In such a case, the tree&#39;s ...", "dateLastCrawled": "2022-01-26T04:14:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.8", "name": "algorithm - <b>Minimax</b>: what to do with equal scores in endgame? - Stack ...", "url": "https://stackoverflow.com/questions/22607715/minimax-what-to-do-with-equal-scores-in-endgame", "isFamilyFriendly": true, "displayUrl": "https://<b>stackoverflow.com</b>/questions/22607715", "snippet": "For example, we are <b>playing</b> <b>chess</b> and the player (<b>playing</b> white) has reached this position: It is the players turn. So there is a mate in one with Qg7, the node for Qg7 thus gets a score of 1. But for instance, Ke1 is also a legal move. The only reply is c5, then Qg7# is still available. And because Qg7 gets a score of 1, so does c5, so does Ke1.", "dateLastCrawled": "2022-01-08T06:49:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.9", "name": "<b>Minimax Algorithm in Game Theory</b> | Set 3 (Tic-Tac-Toe AI - Finding ...", "url": "https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-3-tic-tac-toe-ai-finding-optimal-move/", "isFamilyFriendly": true, "displayUrl": "https://www.geeksforgeeks.org/<b>minimax-algorithm-in-game-theory</b>-set-3-tic-tac-toe-ai...", "snippet": "<b>Minimax</b> : To check whether or not the current move is better than the best move we take the help of <b>minimax</b> () function which will consider all the possible ways the game can go and returns the best value for that move, assuming the opponent also plays optimally. The code for the maximizer and minimizer in the <b>minimax</b> () function <b>is similar</b> to ...", "dateLastCrawled": "2022-02-02T10:19:00.0000000Z", "language": "en", "isNavigational": false}], [{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "name": "Is <b>Minimax</b> Good For <b>Chess</b>? \u2013 ameliadanver.com", "url": "https://ameliadanver.com/is-minimax-good-for-chess/", "isFamilyFriendly": true, "displayUrl": "https://ameliadanver.com/is-<b>minimax</b>-good-for-<b>chess</b>", "snippet": "Is <b>minimax</b> good for <b>chess</b>? Image by author. The <b>minimax</b> algorithm takes advantage of the fact that <b>chess</b> is a zero-sum game. Maximizing your chances of winning is the same as minimizing the opponent&#39;s chances of winning. Each turn <b>can</b> be seen as a player making a move to maximize the evaluation function while the other tries to minimize it. What modification to <b>minimax</b> procedure <b>can</b> be made to improve its performance? The method that we are going to look in this article is called alpha-beta ...", "dateLastCrawled": "2022-02-01T10:07:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.1", "name": "<b>Minimax</b> Alpha-Beta Pruning <b>Can</b> Obscure Losing Branches", "url": "https://www.ross.ws/?_writing/articles/Minimax%20Alpha-Beta%20Pruning%20Can%20Obscure%20Losing%20Branches", "isFamilyFriendly": true, "displayUrl": "https://www.ross.ws/?_writing/articles/<b>Minimax</b> Alpha-Beta Pruning <b>Can</b> Obscure Losing...", "snippet": "These connections <b>can</b> <b>be thought</b> of as &quot;branches&quot; forming what is termed the &quot;search tree&quot; of potential paths of future play. In a nutshell, <b>minimax</b> operates by considering all the legal moves available to whichever player whose turn it is at that node. For each one of those resulting nodes, it considers all the legal replies available to the opponent, and for each one of those, all the legal replies, etc. \u2014 as far down into the search tree as possible. <b>Minimax</b> looks forward into the game ...", "dateLastCrawled": "2022-01-20T10:24:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.2", "name": "Game <b>Playing</b> - <b>Chess</b> &amp; Checkers, <b>Minimax</b> and Alpha Beta cutoff", "url": "https://www.openbookproject.net/py4fun/minimax/minimax.html", "isFamilyFriendly": true, "displayUrl": "https://www.openbookproject.net/py4fun/<b>minimax</b>/<b>minimax</b>.html", "snippet": "This <b>minimax</b> algorithm <b>can</b> be applied to the <b>chess</b> problem above. The computer creates a game node and takes an initial evaluation. It will then compute which moves are possible. It will eventually choose the best of these moves (with the maximum value for white). Then, the process repeats for each of the dozens of child game nodes. The computer will choose the worst of these (for white) since black is <b>playing</b> and best for black is worst for white. So here, we minimize the value for white ...", "dateLastCrawled": "2022-01-31T10:12:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.3", "name": "Optimizing Decision-making with the <b>Minimax</b> AI algorithm | by Shukant ...", "url": "https://medium.com/swlh/optimizing-decision-making-with-the-minimax-ai-algorithm-69cce500c6d6", "isFamilyFriendly": true, "displayUrl": "https://medium.com/swlh/optimizing-decision-making-with-the-<b>minimax</b>-ai-algorithm-69cce...", "snippet": "The <b>Minimax</b> algorithm <b>can</b> <b>be thought</b> of the computer <b>playing</b> against itself to find the best move! It follows the human <b>thought</b> process \u2014 if I do this move, what moves will my opponent have ...", "dateLastCrawled": "2022-01-30T12:46:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.4", "name": "<b>GitHub</b> - <b>rjhunjhunwala/Chess</b>: <b>Minimax</b> + Alpha-Beta pruning <b>chess</b> AI", "url": "https://github.com/rjhunjhunwala/Chess", "isFamilyFriendly": true, "displayUrl": "https://<b>github.com</b>/<b>rjhunjhunwala/Chess</b>", "snippet": "Ending states of the game, win/lose/draw, <b>can</b> <b>be thought</b> of as leafs, because they serve as terminal nodes of the tree, so formally, they are called leaf nodes. Conventionally, we call these tree a &quot;game-tree&quot;. For a trivial game the game-tree might have a very small complexity, formally, we define the &quot;game-tree-complexity&quot; to be the number of &quot;leaf-nodes&quot; in the tree. Therefore for tic-tac-toe, since the game-tree is trivially small, we define a win to have value one, a draw to have value ...", "dateLastCrawled": "2021-08-27T14:17:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.5", "name": "Von Neumann&#39;s <b>Minimax Theorem/ algorithm</b>", "url": "https://iq.opengenus.org/minimax-theorem-algorithm-von-neumann/", "isFamilyFriendly": true, "displayUrl": "https://iq.opengenus.org/<b>minimax-theorem-algorithm</b>-von-neumann", "snippet": "<b>Minimax</b> is a recursive algorithm which is used to choose an optimal move for a player assuming that the other player is also <b>playing</b> optimally. It is used in games such as tic-tac-toe, go, <b>chess</b>, isola, checkers, and many other two-player games. Such games are called games of perfect information because it is possible to see all the possible moves of a particular game. There <b>can</b> be two-player games which are not of perfect information such as Scrabble because the opponent&#39;s move cannot be ...", "dateLastCrawled": "2022-01-04T10:34:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.6", "name": "<b>Minimax Algorithm Guide: How to Create</b> an Unbeatable AI", "url": "https://www.freecodecamp.org/news/minimax-algorithm-guide-how-to-create-an-unbeatable-ai/", "isFamilyFriendly": true, "displayUrl": "https://www.freecodecamp.org/news/<b>minimax-algorithm-guide-how-to-create</b>-an-unbeatable-ai", "snippet": "A <b>minimax</b> algorithm is a recursive program written to find the best gameplay that minimizes any tendency to lose a game while maximizing any opportunity to win the game. Graphically, we <b>can</b> represent <b>minimax</b> as an exploration of a game tree&#39;s nodes to discover the best game move to make. In such a case, the tree&#39;s root is the game&#39;s current ...", "dateLastCrawled": "2022-01-26T04:14:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.7", "name": "<b>Playing Strategy Games With</b> The <b>Minimax</b> Algorithm", "url": "https://www.freecodecamp.org/news/playing-strategy-games-with-minimax-4ecb83b39b4b/", "isFamilyFriendly": true, "displayUrl": "https://www.freecodecamp.org/news/<b>playing-strategy-games-with</b>-<b>minimax</b>-4ecb83b39b4b", "snippet": "<b>Playing Strategy Games With</b> The <b>Minimax</b> Algorithm. In this lesson, we\u2019ll explore a popular algorithm called <b>minimax</b>. We\u2019ll also learn some of its friendly neighborhood add-on features like heuristic scores, iterative deepening, and alpha-beta pruning. Using these techniques, we <b>can</b> create a more flexible and powerful game <b>playing</b> agent.", "dateLastCrawled": "2022-02-03T01:22:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.8", "name": "<b>CSC304 Lecture 6 Game Theory : Zero</b>-<b>Sum Games, The Minimax Theorem</b>", "url": "https://www.cs.toronto.edu/~nisarg/teaching/304f19/slides/304f19-L6.pdf", "isFamilyFriendly": true, "displayUrl": "https://www.cs.toronto.edu/~nisarg/teaching/304f19/slides/304f19-L6.pdf", "snippet": "I thought there was nothing worth publishing until the Minimax Theorem was proved\u201d Proof of the Minimax Theorem CSC304 - Nisarg Shah 18 \u2022Simpler proof using Nash\u2019s theorem ut predates Nash\u2019s theorem \u2022Suppose \ud835\udc65\u0de41,\ud835\udc65\u0de42 is a NE Note: A Nash equilibrium exists due to Nash\u2019s theorem \u2022P1 gets value \ud835\udc63\u0de4=\ud835\udc65\u0de41\ud835\udc47\ud835\udc34\ud835\udc65\u0de42 \u2022\ud835\udc65\u0de41 is best response for P1 : \ud835\udc63\u0de4=max\ud835\udc65 1 \ud835\udc651 \ud835\udc47\ud835\udc34\ud835\udc65\u0de4 2 \u2022\ud835\udc65\u0de42 is best response for P2 : \ud835\udc63\u0de4=min\ud835\udc65 2 \ud835\udc65\u0de41\ufffd", "dateLastCrawled": "2022-01-28T10:46:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.9", "name": "Strategy for <b>playing</b> a board game with <b>Minimax</b> algorithm - Artificial ...", "url": "https://ai.stackexchange.com/questions/25427/strategy-for-playing-a-board-game-with-minimax-algorithm", "isFamilyFriendly": true, "displayUrl": "https://ai.stackexchange.com/.../strategy-for-<b>playing</b>-a-board-game-with-<b>minimax</b>-algorithm", "snippet": "This is more of an art than a science - ask any <b>chess</b> grandmaster. I&#39;d look up existing literature on the game and see if any existing strategies <b>can</b> be translated into a heuristic function. If there is no literature (e.g. because the game is new or unpopular), you could spend some time <b>playing</b> it yourself to discover what works. Alternatively (and perhaps more interesting), you could use a simple heuristic function with more emergent behavior, increase the time the <b>MiniMax</b> algorithm has to ...", "dateLastCrawled": "2022-01-24T12:10:00.0000000Z", "language": "en", "isNavigational": false}], [{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "name": "<b>Minimax</b> algorithm and alpha-beta pruning | Mathspp", "url": "https://mathspp.com/blog/minimax-algorithm-and-alpha-beta-pruning", "isFamilyFriendly": true, "displayUrl": "https://mathspp.com/blog/<b>minimax</b>-algorithm-and-alpha-beta-pruning", "snippet": "However, suppose we were <b>playing</b> <b>chess</b>. In <b>chess</b>, players <b>can</b> generally make plenty of different moves, which means that the trees that I have been drawing would get very huge, very fast. On top of that, <b>chess</b> matches last for much longer than just three or four moves, which means that the trees <b>can</b> also get very deep.", "dateLastCrawled": "2022-01-30T08:30:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.1", "name": "Why <b>Minimax</b> Works: An Alternative Explanation", "url": "https://dis.ijs.si/MitjaL/documents/Why_Minimax_Works-IJCAI-05.pdf", "isFamilyFriendly": true, "displayUrl": "https://dis.ijs.si/MitjaL/documents/Why_<b>Minimax</b>_Works-IJCAI-05.pdf", "snippet": "Both game-<b>playing</b> programs and humans use multivalued position evaluations. There is little doubt this is necessary in games where the final outcome is multivalued (Othello, tarok etc.). In games where the outcome <b>can</b> only be a <b>loss</b>, a win and perhaps a draw (<b>chess</b>, checkers etc.), multiple values might seem to be useful only as a way to", "dateLastCrawled": "2021-11-07T13:04:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.2", "name": "GitHub - divyanshuanand02/Noughts-Crosses: <b>Minimax</b> is a Game Theory ...", "url": "https://github.com/divyanshuanand02/Noughts-Crosses", "isFamilyFriendly": true, "displayUrl": "https://<b>github.com</b>/divyanshuanand02/Noughts-Crosses", "snippet": "The game is so simple that we <b>can</b> generate the entire game tree without trouble, whereas in <b>chess</b> there are already 69,352,859,712,417 possible games that could\u2019ve been played after just 10 moves. What is <b>Minimax</b> . <b>Minimax</b> is a type of adversarial search algorithm for generating and exploring game trees. It is mostly used to solve zero-sum games where one side\u2019s gain is equivalent to other side\u2019s <b>loss</b>, so adding all gains and subtracting all losses end up being zero. Adversarial search ...", "dateLastCrawled": "2022-02-02T17:46:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.3", "name": "<b>Minimax</b> Algorithm with <b>Alpha-beta pruning</b> - HackerEarth Blog", "url": "https://www.hackerearth.com/blog/developers/minimax-algorithm-alpha-beta-pruning/", "isFamilyFriendly": true, "displayUrl": "https://www.hackerearth.com/blog/developers/<b>minimax</b>-algorithm-<b>alpha-beta-pruning</b>", "snippet": "For instance, in <b>chess</b> or tic-tac-toe, the outcome is either a win, a <b>loss</b>, or a draw, and these <b>can</b> be represented by the values +1, -1, or 0, respectively. There are games that have a much larger range of possible outcomes; for instance, the utilities in backgammon varies from +192 to -192. A utility function <b>can</b> also be called a payoff function.", "dateLastCrawled": "2022-02-02T12:22:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.4", "name": "<b>Minimax Algorithm in Game Theory</b> | Set 3 (Tic-Tac-Toe AI - Finding ...", "url": "https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-3-tic-tac-toe-ai-finding-optimal-move/", "isFamilyFriendly": true, "displayUrl": "https://www.geeksforgeeks.org/<b>minimax-algorithm-in-game-theory</b>-set-3-tic-tac-toe-ai...", "snippet": "Remember this implementation of <b>minimax</b> algorithm <b>can</b> be applied any 2 player board game with some minor changes to the board structure and how we iterate through the moves. Also sometimes it is impossible for <b>minimax</b> to compute every possible game state for complex games like <b>Chess</b>. Hence we only compute upto a certain depth and use the evaluation function to calculate the value of the board.", "dateLastCrawled": "2022-02-02T10:19:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.5", "name": "How Many Moves Ahead Does a <b>Chess</b> Computer Think?", "url": "https://www.chessjournal.com/how-many-moves-ahead-does-a-chess-computer-think/", "isFamilyFriendly": true, "displayUrl": "https://www.<b>chess</b>journal.com/how-many-moves-ahead-does-a-<b>chess</b>-computer-think", "snippet": "For example, if you\u2019re one move away from losing, <b>minimax</b> would choose a move that ensures your <b>loss</b> is as small as possible. This approach works because computers <b>can</b> process so many numbers so quickly. The number of possible board positions increases exponentially with each move, so it\u2019s only necessary to look at a few possibilities to find the best ones. If <b>chess</b> programs looked further than about 30 moves ahead\u2014the point where every game ends\u2014they\u2019d run out of processing power ...", "dateLastCrawled": "2022-02-01T20:18:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.6", "contractualRules": [{"_type": "ContractualRules/LicenseAttribution", "targetPropertyName": "snippet", "targetPropertyIndex": 6, "mustBeCloseToContent": true, "license": {"name": "CC-BY-SA", "url": "http://creativecommons.org/licenses/by-sa/3.0/"}, "licenseNotice": "Text under CC-BY-SA license"}], "name": "<b>Minimax</b> - <b>Wikipedia</b>", "url": "https://en.wikipedia.org/wiki/Minimax", "isFamilyFriendly": true, "displayUrl": "https://<b>en.wikipedia.org</b>/wiki/<b>Minimax</b>", "snippet": "<b>Minimax</b> (sometimes MinMax, MM or saddle point) is a decision rule used in artificial intelligence, decision theory, game theory, statistics, and philosophy for minimizing the possible <b>loss</b> for a worst case (maximum <b>loss</b>) scenario.When dealing with gains, it is referred to as &quot;maximin&quot;\u2014to maximize the minimum gain. Originally formulated for n-player zero-sum game theory, covering both the cases where players take alternate moves and those where they make simultaneous moves, it has also been ...", "dateLastCrawled": "2022-02-03T03:19:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.7", "name": "How <b>Chess</b> Is Solved Using AI - by Vinay Kumar Paspula", "url": "https://vinaypaspula.substack.com/p/how-chess-was-solved-using-ai-baa9b6fe2af0", "isFamilyFriendly": true, "displayUrl": "https://vinaypaspula.substack.com/p/how-<b>chess</b>-was-solved-using-ai-baa9b6fe2af0", "snippet": "With the advent of <b>minimax</b> variations, you\u2019ll still find <b>minimax</b> as the core algorithm in modern <b>Chess</b> systems today. <b>Chess</b> programs are commonly made up of three modules. The first is a move generator which analyses the current board and identifies the legal moves that <b>can</b> be made. The second module is the evaluation function, which computes a relative utility for a given board configuration like how good a given board is <b>compared</b> to others for a given board configuration. The final ...", "dateLastCrawled": "2022-01-16T08:32:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.8", "name": "If <b>minimax</b> is a method in decision theory for minimizing maximum <b>loss</b> ...", "url": "https://www.quora.com/If-minimax-is-a-method-in-decision-theory-for-minimizing-maximum-loss-what-is-the-algorithm-for-generating-the-maximum-possible-loss-called", "isFamilyFriendly": true, "displayUrl": "https://www.quora.com/If-<b>minimax</b>-is-a-method-in-decision-theory-for-minimizing-maximum...", "snippet": "Answer: This is actually the same algorithm so still <b>minimax</b>. Sometimes there are switched signs in implementation in between levels and it gets another name negamax. There is are a lot of improvements to search deep trees heuristically (alpha-beta, transposition tables \u2026) but it is another ques...", "dateLastCrawled": "2022-01-13T13:44:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.9", "name": "Strategy for <b>playing</b> a board game with <b>Minimax</b> algorithm - Artificial ...", "url": "https://ai.stackexchange.com/questions/25427/strategy-for-playing-a-board-game-with-minimax-algorithm", "isFamilyFriendly": true, "displayUrl": "https://ai.stackexchange.com/.../strategy-for-<b>playing</b>-a-board-game-with-<b>minimax</b>-algorithm", "snippet": "I&#39;m using the <b>MiniMax</b> algorithm with a time limit to play the game. If we got to children, we return $\\infty$ for a player win ... But it depends on how costly it is to compute the heuristic function <b>compared</b> to simulating moves in the game. If the heuristic takes longer than simulating a game move, it might be worth simplifying it so it runs faster and you <b>can</b> look ahead further. This often leads to more emergent and advanced strategies that are hard to express mathematically. An extreme ...", "dateLastCrawled": "2022-01-24T12:10:00.0000000Z", "language": "en", "isNavigational": false}]], "gen_res": [[{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "name": "Understanding the 3 most common <b>loss</b> functions for <b>Machine</b> <b>Learning</b> ...", "url": "https://towardsdatascience.com/understanding-the-3-most-common-loss-functions-for-machine-learning-regression-23e0ef3e14d3", "isFamilyFriendly": true, "displayUrl": "https://towardsdatascience.com/understanding-the-3-most-common-<b>loss</b>-functions-for...", "snippet": "A <b>loss function</b> in <b>Machine</b> <b>Learning</b> is a measure of how accurately your ML model is able to predict the expected outcome i.e the ground truth. The <b>loss function</b> will take two items as input: the output value of our model and the ground truth expected value. The output of the <b>loss function</b> is called the <b>loss</b> which is a measure of how well our model did at predicting the outcome. A high value for the <b>loss</b> means our model performed very poorly. A low value for the <b>loss</b> means our model performed ...", "dateLastCrawled": "2022-02-02T13:52:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.1", "name": "Generative Adversarial Networks (GANs) - TJ <b>Machine</b> <b>Learning</b>", "url": "https://tjmachinelearning.com/lectures/1920/guest/Generative_Adversarial_Networks.pdf", "isFamilyFriendly": true, "displayUrl": "https://tj<b>machinelearning</b>.com/lectures/1920/guest/Generative_Adversarial_Networks.pdf", "snippet": "Figure 1: <b>Minimax</b> objective function Density Models follow a stochastic approach. To simplify, Explicit Density models pick a random variable and then compare that random variable\u2019s value in the data provided (e.g. plotting the degree that some images are green) and then tries to learn a function to estimate this nature. Implicit models, aim to generate samples to mimic the given &quot;real&quot; data (training data). 3 Concept Generative Adversarial Networks are currently the state-of-the-art ...", "dateLastCrawled": "2021-08-25T21:59:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.2", "name": "<b>Machine</b> <b>Learning</b> Concepts for Revision | by Raunak Sarada | Medium", "url": "https://raunaksarada-cse21.medium.com/machine-learning-concepts-for-revision-491384952d27", "isFamilyFriendly": true, "displayUrl": "https://raunaksarada-cse21.medium.com/<b>machine</b>-<b>learning</b>-concepts-for-revision-491384952d27", "snippet": "ML Concepts. A.I \u2014 Intelligence showed by machines which is common for humans <b>Machine</b> <b>Learning</b>- Recognize the pattern in data and automatically learn and improve through experience without explicitly being programmed Deep <b>Learning</b>- branch of <b>machine</b> <b>learning</b>.We have to deal with lots of data so in that case problems can\u2019t be solved with simple ML algorithms.", "dateLastCrawled": "2022-01-25T20:58:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.3", "name": "Advanced <b>Machine</b> <b>Learning</b> - Computer Vision", "url": "https://www.vision.rwth-aachen.de/media/course/SS/2019/advanced-machine-learning/ml2_19-part17-gans-6on1.pdf", "isFamilyFriendly": true, "displayUrl": "https://www.vision.rwth-aachen.de/media/course/SS/2019/advanced-<b>machine</b>-<b>learning</b>/ml2...", "snippet": "<b>Analogy</b>: counterfeiter \u2022Discriminator Tries to determine whether the sample came from the generator or the data distribution. <b>Analogy</b>: police investigator \u2022Both generator and discriminator are deep networks We can train them with backprop. Image sources: www.bundesbank.de, weclipart.com, Kevin McGuiness 15 Advanced <b>Machine</b> <b>Learning</b> Part 17 \u2013Generative Adversarial Networks Training the Discriminator \u2022Procedure Fix generator weights Train discriminator to distinguish between real and ...", "dateLastCrawled": "2021-10-25T15:15:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.4", "name": "<b>Machine</b> <b>Learning</b> \u2013 KejiTech", "url": "https://davideliu.com/category/machine-learning/", "isFamilyFriendly": true, "displayUrl": "https://davideliu.com/category/<b>machine</b>-<b>learning</b>", "snippet": "Challenges of <b>machine</b> <b>learning</b> <b>Machine</b> <b>learning</b> is a complex field that borrows elements from different areas such as computer science, algebra and statistics. Hence, it is not immediate, even for experts in the field, to build strong <b>machine</b> <b>learning</b> models to solve predefined task. Furthermore, those models should also be optimized with a time-consuming and repetitive hyper-parameters search in order to find the best set \u2026", "dateLastCrawled": "2022-01-09T10:45:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.5", "name": "Understanding Generative Adversarial Networks (GANs) | by Joseph Rocca ...", "url": "https://towardsdatascience.com/understanding-generative-adversarial-networks-gans-cd6e4651a29", "isFamilyFriendly": true, "displayUrl": "https://towardsdatascience.com/understanding-generative-adversarial-networks-<b>gan</b>s-cd6e...", "snippet": "This way to twist the <b>loss</b> function to go from a direct comparison to an indirect one is really something that can be very inspiring for further works in the deep <b>learning</b> area. To conclude, let\u2019s say that we don\u2019t know if the idea of GANs is really \u201cthe most interesting idea in the last 10 years in <b>Machine</b> <b>Learning</b>\u201d\u2026 but it\u2019s pretty obvious that it is, at least, one of the most interesting!", "dateLastCrawled": "2022-02-03T05:20:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.6", "name": "Understanding <b>Gradient Descent with Python</b>", "url": "https://rubikscode.net/2021/06/28/ml-optimization-pt-1-gradient-descent-with-python/", "isFamilyFriendly": true, "displayUrl": "https://rubikscode.net/2021/06/28/ml-optimization-pt-1-<b>gradient-descent-with-python</b>", "snippet": "In general, every <b>machine</b> <b>learning</b> algorithm is composed of three integral parts: A <b>loss</b> function.; Optimization criteria based on the <b>loss</b> function, like a cost function.; Optimization technique \u2013 this process leverages training data to find a solution for optimization criteria (cost function).; As you were able to see in previous articles, some algorithms were created intuitively and didn\u2019t have optimization criteria in mind.", "dateLastCrawled": "2022-02-02T07:26:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.7", "name": "<b>Machine Learning Gist</b> \u00b7 GitHub", "url": "https://gist.github.com/sgoyal1012/b30d70d12b6efad88bb285e8e709b161", "isFamilyFriendly": true, "displayUrl": "https://gist.github.com/sgoyal1012/b30d70d12b6efad88bb285e8e709b161", "snippet": "Orthogonalization - Adjust one knob to adjust one parameter, to solve one problem - The TV knob <b>analogy</b> and the car <b>analogy</b>. Chain of assumptions in <b>Machine</b> <b>Learning</b> and different knobs to say improve performance on train/dev set. Andrew Ng does not recommend Early stopping, as it is a knob that affects multiple thing at once. Setting up your goal", "dateLastCrawled": "2022-01-29T03:42:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.8", "name": "Are there better approaches to AI, other than, <b>machine</b> <b>learning</b>, deep ...", "url": "https://www.quora.com/Are-there-better-approaches-to-AI-other-than-machine-learning-deep-learning-neural-nets-and-rule-engines", "isFamilyFriendly": true, "displayUrl": "https://www.quora.com/Are-there-better-approaches-to-AI-other-than-<b>machine</b>-<b>learning</b>...", "snippet": "Answer (1 of 4): Well, to slightly reframe your question - yes, there is more to AI than ML and rule engines. For example, the basic practice of running smart searches over a problem state space, can be surprisingly useful, and ridiculously simple to implement. More specifically, you can usethe ...", "dateLastCrawled": "2022-01-16T21:28:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.9", "name": "<b>Word similarity and analogy with Skip</b>-Gram \u2013 KejiTech", "url": "https://davideliu.com/2020/03/16/word-similarity-and-analogy-with-skip-gram/", "isFamilyFriendly": true, "displayUrl": "https://davideliu.com/2020/03/16/<b>word-similarity-and-analogy-with-skip</b>-gram", "snippet": "Word <b>analogy</b>. Word <b>analogy</b> evaluation has been performed on the Google <b>Analogy</b> dataset which contains 19544 question pairs, (8,869 semantic and 10,675 syntactic questions)and 14 types of relations (9 morphological and 5 semantic). A typical semantic question can have the following form: rome is to italy as athens is to where the correct answer is greece.Similarly, a syntactic question can be for example: slow is to slowing as run is to where the correct answer is clearly running.In those ...", "dateLastCrawled": "2022-01-16T05:04:00.0000000Z", "language": "en", "isNavigational": false}], [], [{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "name": "(PDF) Using Latent Codes for Class Imbalance Problem in Unsupervised ...", "url": "https://www.researchgate.net/publication/335926235_Using_Latent_Codes_for_Class_Imbalance_Problem_in_Unsupervised_Domain_Adaptation", "isFamilyFriendly": true, "displayUrl": "https://www.researchgate.net/publication/335926235_Using_Latent_Codes_for_Class...", "snippet": "PDF | We address the problem of severe class imbalance in unsupervised domain adaptation, when the class spaces in source and target domains diverge... | Find, read and cite all the research you ...", "dateLastCrawled": "2021-11-14T06:28:00.0000000Z", "language": "en", "isNavigational": false}], [], [], []], "all_bing_queries": ["+(minimax loss)  is like +(playing chess)", "+(minimax loss) is similar to +(playing chess)", "+(minimax loss) can be thought of as +(playing chess)", "+(minimax loss) can be compared to +(playing chess)", "machine learning +(minimax loss AND analogy)", "machine learning +(\"minimax loss is like\")", "machine learning +(\"minimax loss is similar\")", "machine learning +(\"just as minimax loss\")", "machine learning +(\"minimax loss can be thought of as\")", "machine learning +(\"minimax loss can be compared to\")"]}
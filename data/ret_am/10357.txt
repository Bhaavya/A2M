{"src_spec_res": [[{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "name": "<b>java</b> - <b>Sorting</b> <b>deck</b> <b>of Cards</b> using custom <b>sorting</b> algorithms - Stack ...", "url": "https://stackoverflow.com/questions/38045349/sorting-deck-of-cards-using-custom-sorting-algorithms", "isFamilyFriendly": true, "displayUrl": "https://<b>stackoverflow.com</b>/questions/38045349", "snippet": "I am trying to implement different <b>sorting</b> algorithms on <b>a deck</b> <b>of cards</b>. I&#39;ve implemented a base card <b>class</b> using enums to build the suits and faces. My <b>class</b> is based on Dietel&#39;s &amp; Dietel&#39;s <b>Java</b> Book. However, I am struggling in passing the <b>deck</b> <b>of cards</b> into the <b>sorting</b> algorithms I implemented as I am not able to pass in an array which I can sort. I don&#39;t know if my approach is correct, I&#39;ve read many of the posts on stackexchange where some recommend using Comparable", "dateLastCrawled": "2022-01-23T11:21:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.1", "name": "The Pros <b>and Cons of Card Sorting in UX Research</b> | Interaction Design ...", "url": "https://www.interaction-design.org/literature/article/the-pros-and-cons-of-card-sorting-in-ux-research", "isFamilyFriendly": true, "displayUrl": "https://www.interaction-design.org/.../the-pros-<b>and-cons-of-card-sorting-in-ux-research</b>", "snippet": "Card <b>sorting</b> is simple \u2013 there are very few techniques as easy as handing someone <b>a deck</b> <b>of cards</b> and asking them to sort them out. Card <b>sorting</b> is cheap \u2013 you\u2019re talking about some plain card and either printer ink or pen ink. You may also use some sticky notes or some Sellotape. Card <b>sorting</b> is fast \u2013 you can run this exercise quickly and as many times as you need until you get the data you need. Card <b>sorting</b> is user-focused \u2013 the more data we glean from our users rather than ...", "dateLastCrawled": "2022-02-03T04:20:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.2", "name": "<b>Sorting</b> &amp; Comparing", "url": "https://ecs.wgtn.ac.nz/foswiki/pub/Courses/COMP103_2021T3/LectureSchedule/06-SortCompare.pdf", "isFamilyFriendly": true, "displayUrl": "https://ecs.wgtn.ac.nz/foswiki/pub/Courses/COMP103_2021T3/LectureSchedule/06-Sort...", "snippet": "of to sort a standard <b>deck</b> of 52 playing <b>cards</b> (without jokers). Keep in mind that <b>cards</b> only have two values: suit (hearts, diamonds, clubs, spades) and rank (Ace - King). Group Activity: <b>Sorting</b> How many di erent ways are there to sort a 52 card <b>deck</b> of playing <b>cards</b>? We could order them by rank, or by suit { or a combination of the two. Ordering by rank would group all the <b>cards</b> with the same value together (AH,AC,AS,AD,2D,2C,2H,2S,...), but the order of suits would be random. Ordering by ...", "dateLastCrawled": "2022-01-31T16:41:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.3", "name": "<b>BogoSort or Permutation Sort - GeeksforGeeks</b>", "url": "https://www.geeksforgeeks.org/bogosort-permutation-sort/", "isFamilyFriendly": true, "displayUrl": "https://www.geeksforgeeks.org/bogosort-permutation-sort", "snippet": "BogoSort also known as permutation sort, stupid sort, slow sort, shotgun sort or monkey sort is a particularly ineffective algorithm based on generate and test paradigm. The algorithm successively generates permutations of its input until it finds one that is sorted.(Wiki) For example, if bogosort ...", "dateLastCrawled": "2022-02-01T22:56:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.4", "name": "<b>sorting</b> <b>a deck of cards</b> (objects in a list)", "url": "https://python-forum.io/thread-14509.html", "isFamilyFriendly": true, "displayUrl": "https://python-forum.io/thread-14509.html", "snippet": "I am working on an assignment that involves <b>sorting</b> a hand of 20 <b>cards</b> from <b>a deck of cards</b> using bubble sort and insertion sort methods. The code for the <b>deck of cards</b> has already been provided for us (it just ends up being a list of objects of type Card) and should not be edited. if self.getCardValue () &gt; 1 and self.getCardValue () &lt; 11: to ...", "dateLastCrawled": "2022-01-10T08:02:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.5", "name": "Javanotes 8.1.3, Section 5.4 -- Programming Example: Card, Hand, <b>Deck</b>", "url": "https://math.hws.edu/javanotes/c5/s4.html", "isFamilyFriendly": true, "displayUrl": "https://math.hws.edu/javanotes/c5/s4.html", "snippet": "When <b>a deck</b> <b>of cards</b> is first created, it contains 52 <b>cards</b> in some standard order. The <b>Deck</b> <b>class</b> will need a constructor to create a new <b>deck</b>. The constructor needs no parameters because any new <b>deck</b> is the same as any other. There will be an instance method called shuffle() that will rearrange the 52 <b>cards</b> into a random order. The dealCard() instance method will get the next card from the <b>deck</b>. This will be a function with a return type of Card, since the caller needs to know what card is ...", "dateLastCrawled": "2022-02-02T18:34:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.6", "name": "<b>Card</b> and <b>Deck</b> classes <b>C++</b> - <b>Stack Overflow</b>", "url": "https://stackoverflow.com/questions/12735129/card-and-deck-classes-c", "isFamilyFriendly": true, "displayUrl": "https://<b>stackoverflow.com</b>/questions/12735129", "snippet": "When you&#39;re starting a new codebase, start small and simple, add complexity a little at a time, test at every step, get every addition working perfectly before you introduce the next, and never add to code that doesn&#39;t work.. Let&#39;s start with <b>Card</b>: // <b>Card</b>.h #ifndef <b>CARD</b>_H #define <b>CARD</b>_H <b>class</b> <b>Card</b> { public: <b>Card</b>(); private: int value; }; #endif //<b>Card</b>.cc #include &quot;<b>Card</b>.h&quot;", "dateLastCrawled": "2022-01-28T07:45:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.7", "name": "<b>Sorting Algorithms</b> - javatpoint", "url": "https://www.javatpoint.com/sorting-algorithms", "isFamilyFriendly": true, "displayUrl": "https://www.javatpoint.com/<b>sorting-algorithms</b>", "snippet": "It is a very simple sort method which is used to arrange the <b>deck</b> <b>of cards</b> while playing bridge. 7: Merge Sort: Merge sort follows divide and conquer approach in which, the list is first divided into the sets of equal elements and then each half of the list is sorted by using merge sort. The sorted list is combined again to form an elementary sorted array. 8: Quick Sort: Quick sort is the most optimized sort algorithms which performs <b>sorting</b> in O(n log n) comparisons. <b>Like</b> Merge sort, quick ...", "dateLastCrawled": "2022-02-03T00:16:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.8", "name": "<b>Sorting</b> - Topcoder", "url": "https://www.topcoder.com/thrive/articles/Sorting", "isFamilyFriendly": true, "displayUrl": "https://www.topcoder.com/thrive/articles/<b>Sorting</b>", "snippet": "Some might end up with <b>a deck</b> <b>of cards</b> where spades always appear before hearts, in other cases it might be less organized. Fundamentally, these are all the big bullet points that lead algorithmists to debate the pros and cons of various <b>sorting</b> algorithms. When comparing various <b>sorting</b> algorithms, there are several things to consider. The first is usually runtime. When dealing with increasingly large sets of data, inefficient <b>sorting</b> algorithms can become too slow for practical use within ...", "dateLastCrawled": "2022-01-30T02:43:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.9", "name": "<b>Introduction to Sorting</b> Algorithms | Studytonight", "url": "https://www.studytonight.com/data-structures/introduction-to-sorting", "isFamilyFriendly": true, "displayUrl": "https://www.studytonight.com/data-structures/<b>introduction-to-sorting</b>", "snippet": "<b>Sorting</b> is nothing but arranging the data in ascending or descending order. The term <b>sorting</b> came into picture, as humans realised the importance of searching quickly.. There are so many things in our real life that we need to search for, <b>like</b> a particular record in database, roll numbers in merit list, a particular telephone number in telephone directory, a particular page in a book etc.", "dateLastCrawled": "2022-01-30T05:11:00.0000000Z", "language": "en", "isNavigational": false}], [{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "name": "Javanotes 8.1.3, Section 5.4 -- Programming Example: Card, Hand, <b>Deck</b>", "url": "https://math.hws.edu/javanotes/c5/s4.html", "isFamilyFriendly": true, "displayUrl": "https://math.hws.edu/javanotes/c5/s4.html", "snippet": "First, we&#39;ll design the <b>deck</b> <b>class</b> in detail. When <b>a deck</b> <b>of cards</b> is first created, it contains 52 <b>cards</b> in some standard order. The <b>Deck</b> <b>class</b> will need a constructor to create a new <b>deck</b>. The constructor needs no parameters because any new <b>deck</b> is the same as any other. There will be an instance method called shuffle() that will rearrange the 52 <b>cards</b> into a random order. The dealCard() instance method will get the next card from the <b>deck</b>. This will be a function with a return type of ...", "dateLastCrawled": "2022-02-02T18:34:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.1", "name": "<b>COE428 Lab 3: Sorting</b> - Ryerson University", "url": "https://www.ee.ryerson.ca/~courses/coe428/labs/lab3.pdf", "isFamilyFriendly": true, "displayUrl": "https://www.ee.ryerson.ca/~courses/coe428/labs/lab3.pdf", "snippet": "InsertionSort algorithm applied to <b>a deck</b> <b>of cards</b> can be described as: Step 1: If there are no <b>cards</b> to sort, then Stop. Step 2: Otherwise, remove the top card from the unsorted pile, figure out where it should go in the sorted pile and insert it there. Step 3: Go back to step 1. The important characteristics of the algorithm are: \u2022 As it runs, it divides the <b>deck</b> into a sorted portion (initially empty) and an unsorted portion (initially the whole <b>deck</b>). \u2022 Each time Step 2 is performed ...", "dateLastCrawled": "2021-11-19T22:13:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.2", "name": "<b>Sorting Algorithms in Python</b> \u2013 Real Python", "url": "https://realpython.com/sorting-algorithms-python/", "isFamilyFriendly": true, "displayUrl": "https://realpython.com/<b>sorting</b>-algorithms-python", "snippet": "An excellent analogy to explain insertion sort is the way you would sort <b>a deck</b> <b>of cards</b>. Imagine that you\u2019re holding a group <b>of cards</b> in your hands, and you want to arrange them in order. You\u2019d start by comparing a single card step by step with the rest of the <b>cards</b> until you find its correct position. At that point, you\u2019d insert the card in the correct location and start over with a new card, repeating until all the <b>cards</b> in your hand were sorted.", "dateLastCrawled": "2022-02-02T19:34:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.3", "name": "Solved This lab revisits <b>sorting</b> algorithms. | Chegg.com", "url": "https://www.chegg.com/homework-help/questions-and-answers/lab-revisits-sorting-algorithms-implement-analyze-two-sort-algorithms-insertionsort-merges-q11004291", "isFamilyFriendly": true, "displayUrl": "https://www.chegg.com/homework-help/questions-and-answers/lab-revisits-<b>sorting</b>...", "snippet": "Step 2 is performed n times (where n is the number <b>of cards</b> in the <b>deck</b>). Step 2 describes how this is done: in this case, get the first unsorted card and insert it into the proper position in the sorted part. It is useful to compare this algorithm with the <b>similar</b> SelectionSort algorithm. Step 1: If there are no <b>cards</b> to sort, then Stop. Step 2:", "dateLastCrawled": "2022-01-05T08:18:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.4", "name": "<b>Sorting</b> - Topcoder", "url": "https://www.topcoder.com/thrive/articles/Sorting", "isFamilyFriendly": true, "displayUrl": "https://www.topcoder.com/thrive/articles/<b>Sorting</b>", "snippet": "Some might end up with <b>a deck</b> <b>of cards</b> where spades always appear before hearts, in other cases it might be less organized. Fundamentally, these are all the big bullet points that lead algorithmists to debate the pros and cons of various <b>sorting</b> algorithms. When comparing various <b>sorting</b> algorithms, there are several things to consider. The first is usually runtime. When dealing with increasingly large sets of data, inefficient <b>sorting</b> algorithms can become too slow for practical use within ...", "dateLastCrawled": "2022-01-30T02:43:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.5", "name": "Insertion Sort - <b>GeeksforGeeks</b>", "url": "https://www.geeksforgeeks.org/insertion-sort/", "isFamilyFriendly": true, "displayUrl": "https://www.<b>geeksforgeeks</b>.org/insertion-sort", "snippet": "Insertion sort is a simple <b>sorting</b> algorithm that works <b>similar</b> to the way you sort playing <b>cards</b> in your hands. The array is virtually split into a sorted and an unsorted part. Values from the unsorted part are picked and placed at the correct position in the sorted part. Algorithm To sort an array of size n in ascending order: 1: Iterate from arr[1] to arr[n] over the array. 2: Compare the current element (key) to its predecessor. 3: If the key element is smaller than its predecessor ...", "dateLastCrawled": "2022-02-03T06:57:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.6", "name": "Java Sort Examples: Arrays.sort, Comparable - <b>Dot</b> Net Perls", "url": "https://www.dotnetperls.com/sort-java", "isFamilyFriendly": true, "displayUrl": "https://<b>www.dotnetperls.com</b>/sort-java", "snippet": "<b>Sorting</b> elements in a collection (ordering them) is not always as simple as calling sort(). Instead we may need Comparable, and special methods. Sort details. Array.sort arranges elements in place. By default, sort() uses an ascending order. With objects, we use the Comparable interface, and implement its compareTo method. A Comparable example. Here we introduce a custom <b>class</b>, Item, and have it implement Comparable(Item). It specifies the compareTo method. In compareTo we return the result ...", "dateLastCrawled": "2022-01-17T07:06:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.7", "name": "20+ <b>Division Card Games for Learning at School</b> and Home", "url": "https://edudingo.com/20-division-card-games-for-learning-at-school-and-home/", "isFamilyFriendly": true, "displayUrl": "https://edudingo.com/20-<b>division-card-games-for-learning-at-school</b>-and-home", "snippet": "This free file contains 3 division card games (24 games total). Division dog is the most dynamic and challenging and better for home (or students with <b>similar</b> levels). Division Draw is played with <b>a deck</b> of standard playing <b>cards</b> and enables 2 to 5 players to practice division facts.", "dateLastCrawled": "2022-02-02T05:25:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.8", "name": "Can a radical be <b>negative</b> when the index is even? - GeeksforGeeks", "url": "https://www.geeksforgeeks.org/can-a-radical-be-negative-when-the-index-is-even/", "isFamilyFriendly": true, "displayUrl": "https://www.geeksforgeeks.org/can-a-radical-be-<b>negative</b>-when-the-index-is-even", "snippet": "Here the radical is <b>negative</b> and the index is 6 which is even. The result will be 3i which is a complex number. <b>Similar</b> Problems . Question 1: Find the fourth root of -16. Solution: Here the index is 4 and radical is -16. As known 2 4 = 16. Since the roots can be positive or <b>negative</b> if the index is of the order 2n. So the result is 2i or -2i", "dateLastCrawled": "2021-12-29T14:25:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.9", "name": "<b>sorting</b> - How to use <b>Comparator</b> in Java to sort - <b>Stack Overflow</b>", "url": "https://stackoverflow.com/questions/2839137/how-to-use-comparator-in-java-to-sort", "isFamilyFriendly": true, "displayUrl": "https://<b>stackoverflow.com</b>/questions/2839137", "snippet": "The solution can be optimized in following way: Firstly, use a private inner <b>class</b> as the scope for the fields is to be the enclosing <b>class</b> TestPeople so as the implementation of <b>class</b> People won&#39;t get exposed to outer world. This can be understood in terms of creating an APIthat expects a sorted list of people Secondly, using the Lamba ...", "dateLastCrawled": "2022-01-28T23:33:00.0000000Z", "language": "en", "isNavigational": false}], [{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "name": "java - How to Sort the <b>Cards</b>. (Is my code wrong?) - <b>Stack Overflow</b>", "url": "https://stackoverflow.com/questions/28910405/how-to-sort-the-cards-is-my-code-wrong", "isFamilyFriendly": true, "displayUrl": "https://<b>stackoverflow.com</b>/questions/28910405", "snippet": "If one wants to sort <b>cards</b>, in terms of their Suit first, then one <b>can</b> use Comparatortoo, in this example, for which not much of a change is required, just change the enum part, as shown below and provide implementation for Comparator &lt; Card &gt;, within the Cardclass, and let Collections.sort ( <b>deck</b>, suitComparator )do the work, as shown in this example.", "dateLastCrawled": "2022-01-16T01:21:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.1", "name": "The Pros <b>and Cons of Card Sorting in UX Research</b> | Interaction Design ...", "url": "https://www.interaction-design.org/literature/article/the-pros-and-cons-of-card-sorting-in-ux-research", "isFamilyFriendly": true, "displayUrl": "https://www.interaction-design.org/.../the-pros-<b>and-cons-of-card-sorting-in-ux-research</b>", "snippet": "<b>Cards</b> <b>sorting</b> may not go deep enough \u2013 this is kind of like the ignoring tasks disadvantage; if your users <b>can</b>\u2019t place the data in context they may give you a very top level analysis without getting deep into the problem you are trying to solve. Summary. Card <b>sorting</b> is a great technique but it\u2019s not always the right technique for UX ...", "dateLastCrawled": "2022-02-03T04:20:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.2", "name": "<b>Probability</b> in Maths - Definition, Formula, Types, Problems and Solutions", "url": "https://byjus.com/maths/probability/", "isFamilyFriendly": true, "displayUrl": "https://byjus.com/maths/<b>probability</b>", "snippet": "<b>Probability</b> for <b>Class</b> 10 is an important topic for the students which explains all the basic concepts of this topic. The <b>probability</b> of all the events in a sample space adds up to 1. For example, when we toss a coin, either we get Head OR Tail, only two possible outcomes are possible (H, T). But if we toss two coins in the air, there could be three possibilities of events to occur, such as both the coins show heads or both show tails or one shows heads and one tail, i.e.(H, H), (H, T),(T, T ...", "dateLastCrawled": "2022-02-03T06:05:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.3", "name": "Fundamentals Of Data Structures In C Horowitz Sahni And Mehta 2nd Edition", "url": "https://thesource2.metro.net/e/uploads/F1O9T9/fundamentals-of-data-structures-in-c-horowitz-sahni-and-mehta-2nd-edition_pdf", "isFamilyFriendly": true, "displayUrl": "https://thesource2.metro.net/e/uploads/F1O9T9/fundamentals-of-data-structures-in-c...", "snippet": "This algorithm <b>can</b> be best <b>thought</b> of as a <b>sorting</b> scheme which <b>can</b> be compared to that of <b>sorting</b> a hand of playing <b>cards</b>, i.e., you take one card and then look at the rest with the intent of building up an ordered set <b>of cards</b> in your hand. 15 Best + Free Data Structures &amp; Algorithms Course", "dateLastCrawled": "2022-01-28T14:30:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.4", "name": "<b>Sorting</b> - Topcoder", "url": "https://www.topcoder.com/thrive/articles/Sorting", "isFamilyFriendly": true, "displayUrl": "https://www.topcoder.com/thrive/articles/<b>Sorting</b>", "snippet": "Some might end up with <b>a deck</b> <b>of cards</b> where spades always appear before hearts, in other cases it might be less organized. Fundamentally, these are all the big bullet points that lead algorithmists to debate the pros and cons of various <b>sorting</b> algorithms. When comparing various <b>sorting</b> algorithms, there are several things to consider. The first is usually runtime. When dealing with increasingly large sets of data, inefficient <b>sorting</b> algorithms <b>can</b> become too slow for practical use within ...", "dateLastCrawled": "2022-01-30T02:43:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.5", "name": "<b>Cognitive-behavioral therapy teaching materials</b> for children with high ...", "url": "https://autismteachingstrategies.com/autism-strategies/cognitive-behavioral-therapy-teaching-materials-for-children-with-high-functioning-autism-seven-engaging-activities-with-free-downloads/", "isFamilyFriendly": true, "displayUrl": "https://autismteachingstrategies.com/autism-strategies/cognitive-behavioral-therapy", "snippet": "<b>A deck</b> of 44 Emotion Word <b>Cards</b> and <b>a deck</b> of 48 Question <b>Cards</b>. This is not a CBT activity per se, but rather a flexible and diverting tool to get kids talking and thinking about feelings in a variety of ways. CBT <b>Thought</b> Bubble Kit. This is a set of pre-printed <b>thought</b> bubbles. Half of them are \u201cPoison Thoughts\u201d (cognitive distortions) commonly encountered in children with ASD. The other half are \u201cAntidote Thoughts\u201d that <b>can</b> be used to counter the automatic <b>negative</b> thoughts. These ...", "dateLastCrawled": "2022-01-29T05:39:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.6", "name": "Chapter 7: Arrays and the ArrayList <b>Class</b> Flashcards | Chegg.com", "url": "https://www.chegg.com/flashcards/chapter-7-arrays-and-the-arraylist-class-da5944d6-862f-409a-a19c-b3e2d6e0ed04/deck", "isFamilyFriendly": true, "displayUrl": "https://www.chegg.com/flash<b>cards</b>/chapter-7-arrays-and-the-arraylist-<b>class</b>-da5944d6-862...", "snippet": "indicates the number of elements, or values, the array <b>can</b> hold; must be a non <b>negative</b> integer expression; <b>can</b> be a literal value or a variable ; subscript. each element of an array is assigned a number known as a subscript; used as an index to pinpoint a specific element within an array ; bounds checking. Java does not allow a statement to use a subscript that is outside the range of valid subscripts for an array; occurs at runtime; program will throw an exception and immediately terminate ...", "dateLastCrawled": "2022-01-17T19:01:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.7", "name": "How To Improve the <b>Cognitive Flexibility</b> of Your Students | Ozobot", "url": "https://ozobot.com/blog/how-to-improve-the-cognitive-flexibility-of-your-students", "isFamilyFriendly": true, "displayUrl": "https://ozobot.com/blog/how-to-improve-the-<b>cognitive-flexibility</b>-of-your-students", "snippet": "She uses the example of <b>a deck</b> of playing <b>cards</b> to explain <b>cognitive flexibility</b>. A child <b>can</b> sort the <b>cards</b> in a few ways: by color, number, or suit. The ability to see the different ways of doing things and understanding when certain options are best displays <b>cognitive flexibility</b>. We use <b>cognitive flexibility</b> daily, even if mostly on a micro level. The team at CogniFit provide some examples of how cognitive shifting <b>can</b> help in various life situations. These include: The ability to adapt ...", "dateLastCrawled": "2022-01-29T02:12:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.8", "name": "<b>Negative Numbers for Young Students</b> \u2013 Denise Gaskins&#39; Let&#39;s Play Math", "url": "https://denisegaskins.com/2007/01/10/negative-numbers-for-young-students/", "isFamilyFriendly": true, "displayUrl": "https://denisegaskins.com/2007/01/10/<b>negative-numbers-for-young-students</b>", "snippet": "Use <b>a deck</b> of math <b>cards</b>, which are simply normal playing <b>cards</b> with the face <b>cards</b> and jokers removed. Black <b>cards</b> are positive numbers, red <b>cards</b> are <b>negative</b>. For each player, turn one card face down and one face up. Everyone <b>can</b> see the face-up card, but only the player gets to look at her face-down card (until the end of the game, when all <b>cards</b> are revealed).", "dateLastCrawled": "2022-01-27T00:09:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.9", "name": "<b>cs 01</b> Flashcards | <b>Quizlet</b>", "url": "https://quizlet.com/357655496/cs-01-flash-cards/", "isFamilyFriendly": true, "displayUrl": "https://<b>quizlet.com</b>/357655496/<b>cs-01</b>-flash-<b>cards</b>", "snippet": "Consider the following algorithms. Assume that you have <b>a deck</b> <b>of cards</b> with numbers on them, and you are looking for a card with a particular number: \u00b7 Algorithm 1: 1. look at the middle card in your <b>deck</b>. 2. if correct, done! You have found what you are searching for! 3. if you are looking for a larger number, discard the lower half of the ...", "dateLastCrawled": "2021-04-14T13:23:00.0000000Z", "language": "en", "isNavigational": false}], [{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "name": "<b>Sorting</b> &amp; Comparing", "url": "https://ecs.wgtn.ac.nz/foswiki/pub/Courses/COMP103_2021T3/LectureSchedule/06-SortCompare.pdf", "isFamilyFriendly": true, "displayUrl": "https://ecs.wgtn.ac.nz/foswiki/pub/Courses/COMP103_2021T3/LectureSchedule/06-Sort...", "snippet": "of to sort a standard <b>deck</b> of 52 playing <b>cards</b> (without jokers). Keep in mind that <b>cards</b> only have two values: suit (hearts, diamonds, clubs, spades) and rank (Ace - King). Group Activity: <b>Sorting</b> How many di erent ways are there to sort a 52 card <b>deck</b> of playing <b>cards</b>? We could order them by rank, or by suit { or a combination of the two. Ordering by rank would group all the <b>cards</b> with the same value together (AH,AC,AS,AD,2D,2C,2H,2S,...), but the order of suits would be random. Ordering by ...", "dateLastCrawled": "2022-01-31T16:41:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.1", "name": "<b>COE428 Lab 3: Sorting</b> - Ryerson University", "url": "https://www.ee.ryerson.ca/~courses/coe428/labs/lab3.pdf", "isFamilyFriendly": true, "displayUrl": "https://www.ee.ryerson.ca/~courses/coe428/labs/lab3.pdf", "snippet": "InsertionSort algorithm applied to <b>a deck</b> <b>of cards</b> <b>can</b> be described as: Step 1: If there are no <b>cards</b> to sort, then Stop. Step 2: Otherwise, remove the top card from the unsorted pile, figure out where it should go in the sorted pile and insert it there. Step 3: Go back to step 1. The important characteristics of the algorithm are: \u2022 As it runs, it divides the <b>deck</b> into a sorted portion (initially empty) and an unsorted portion (initially the whole <b>deck</b>). \u2022 Each time Step 2 is performed ...", "dateLastCrawled": "2021-11-19T22:13:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.2", "name": "Solved This lab revisits <b>sorting</b> algorithms. | Chegg.com", "url": "https://www.chegg.com/homework-help/questions-and-answers/lab-revisits-sorting-algorithms-implement-analyze-two-sort-algorithms-insertionsort-merges-q11004291", "isFamilyFriendly": true, "displayUrl": "https://www.chegg.com/homework-help/questions-and-answers/lab-revisits-<b>sorting</b>...", "snippet": "InsertionSort algorithm applied to <b>a deck</b> <b>of cards</b> <b>can</b> be described as: Step 1: If there are no <b>cards</b> to sort, then Stop. Step 2: Otherwise, remove the top card from the unsorted pile, figure out where it should go in the sorted pile and insert it there. Step 3: Go back to step 1. The important characteristics of the algorithm are: As it runs, it divides the <b>deck</b> into a sorted portion (initially empty) and an unsorted portion (initially the whole <b>deck</b>). Each time Step 2 is performed, the ...", "dateLastCrawled": "2022-01-05T08:18:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.3", "name": "<b>Sorting</b> - Topcoder", "url": "https://www.topcoder.com/thrive/articles/Sorting", "isFamilyFriendly": true, "displayUrl": "https://www.topcoder.com/thrive/articles/<b>Sorting</b>", "snippet": "Some might end up with <b>a deck</b> <b>of cards</b> where spades always appear before hearts, in other cases it might be less organized. Fundamentally, these are all the big bullet points that lead algorithmists to debate the pros and cons of various <b>sorting</b> algorithms. When comparing various <b>sorting</b> algorithms, there are several things to consider. The first is usually runtime. When dealing with increasingly large sets of data, inefficient <b>sorting</b> algorithms <b>can</b> become too slow for practical use within ...", "dateLastCrawled": "2022-01-30T02:43:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.4", "name": "Java Sort Examples: Arrays.sort, Comparable - <b>Dot</b> Net Perls", "url": "https://www.dotnetperls.com/sort-java", "isFamilyFriendly": true, "displayUrl": "https://<b>www.dotnetperls.com</b>/sort-java", "snippet": "Integer.compare Returns <b>negative</b> one, zero, or one if the first argument is smaller, equal, ... The dealer at a casino shuffles <b>a deck</b> <b>of cards</b>. So too <b>can</b> we shuffle elements in arrays in our Java programs (and lose less money on bets). Shuffle. Custom. Many <b>sorting</b> algorithms <b>can</b> be written in Java. But usually, implementing Comparable, and the compareTo method, is best. This enables any two objects to <b>be compared</b>. A review. With Arrays.sort, the low-level details of quick-<b>sorting</b> are ...", "dateLastCrawled": "2022-01-17T07:06:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.5", "name": "Error: &quot;Exception in thread &quot;main&quot; java.lang.ClassCastException ...", "url": "https://stackoverflow.com/questions/5852719/error-exception-in-thread-main-java-lang-classcastexception-manycard-mainc", "isFamilyFriendly": true, "displayUrl": "https://<b>stackoverflow.com</b>/questions/5852719", "snippet": "Your Card <b>class</b> needs to implement Comparable&lt;Card&gt;.This is needed so that the Arrays.sort method <b>can</b> call the compareTo(Card card) method that you will implement in Card and do the <b>sorting</b> based on its return value.. From the documentation, compareTo does the following:. Compares this object with the specified object for order. Returns a <b>negative</b> integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.", "dateLastCrawled": "2022-01-19T03:18:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.6", "name": "Insertion Sort - <b>GeeksforGeeks</b>", "url": "https://www.geeksforgeeks.org/insertion-sort/", "isFamilyFriendly": true, "displayUrl": "https://www.<b>geeksforgeeks</b>.org/insertion-sort", "snippet": "Insertion sort is a simple <b>sorting</b> algorithm that works similar to the way you sort playing <b>cards</b> in your hands. The array is virtually split into a sorted and an unsorted part. Values from the unsorted part are picked and placed at the correct position in the sorted part. Algorithm To sort an array of size n in ascending order: 1: Iterate from arr[1] to arr[n] over the array. 2: Compare the current element (key) to its predecessor. 3: If the key element is smaller than its predecessor ...", "dateLastCrawled": "2022-02-03T06:57:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.7", "name": "<b>Sorting Algorithms in Python</b> \u2013 Real Python", "url": "https://realpython.com/sorting-algorithms-python/", "isFamilyFriendly": true, "displayUrl": "https://realpython.com/<b>sorting</b>-algorithms-python", "snippet": "You <b>can</b> use <b>sorting</b> to solve a wide range of problems: Searching: Searching for an item on a list works much faster if the list is sorted. Selection: Selecting items from a list based on their relationship to the rest of the items is easier with sorted data. For example, finding the k th-largest or smallest value, or finding the median value of the list, is much easier when the values are in ascending or descending order. Duplicates: Finding duplicate values on a list <b>can</b> be done very ...", "dateLastCrawled": "2022-02-02T19:34:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.8", "name": "Fundamentals Of Data Structures In C Horowitz Sahni And Mehta 2nd Edition", "url": "https://thesource2.metro.net/e/uploads/F1O9T9/fundamentals-of-data-structures-in-c-horowitz-sahni-and-mehta-2nd-edition_pdf", "isFamilyFriendly": true, "displayUrl": "https://thesource2.metro.net/e/uploads/F1O9T9/fundamentals-of-data-structures-in-c...", "snippet": "This algorithm <b>can</b> be best thought of as a <b>sorting</b> scheme which <b>can</b> <b>be compared</b> to that of <b>sorting</b> a hand of playing <b>cards</b>, i.e., you take one card and then look at the rest with the intent of building up an ordered set <b>of cards</b> in your hand. 15 Best + Free Data Structures &amp; Algorithms Course", "dateLastCrawled": "2022-01-28T14:30:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.9", "name": "<b>Thematic or Modern Solitaire/Solo Games Using</b> ONLY a 52-card standard ...", "url": "https://boardgamegeek.com/geeklist/264858/thematic-or-modern-solitairesolo-games-using-only", "isFamilyFriendly": true, "displayUrl": "https://boardgamegeek.com/geeklist/264858/<b>thematic-or-modern-solitairesolo-games-using</b>...", "snippet": "Players seek to reunite the Queen of Hearts, at one end of the <b>deck</b>, with her King, at the other, by eliminating all other <b>cards</b>.<b>Cards</b> <b>can</b> be removed one or two at a time, but only when they are bookended by two <b>cards</b> of either the same suit or number. If all <b>cards</b> save the Queen and King are eliminated, the game is won; if <b>cards</b> remain and no further moves <b>can</b> be made, the game is lost.Strategy comes in the form of hand management, deciding which <b>cards</b> to eliminate and when.", "dateLastCrawled": "2022-01-29T02:40:00.0000000Z", "language": "en", "isNavigational": false}]], "gen_res": [[{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "name": "<b>Towards Analogy-Based Explanations in Machine Learning</b> | DeepAI", "url": "https://deepai.org/publication/towards-analogy-based-explanations-in-machine-learning", "isFamilyFriendly": true, "displayUrl": "https://deepai.org/publication/<b>towards-analogy-based-explanations-in-machine-learning</b>", "snippet": "More specifically, we take the view that an <b>analogy</b>-based approach is a viable alternative to existing approaches in the realm of explainable AI and interpretable <b>machine</b> <b>learning</b>, and that <b>analogy</b>-based explanations of the predictions produced by a <b>machine</b> <b>learning</b> algorithm can complement similarity-based explanations in a meaningful way. To corroborate these claims, we outline the basic idea of an <b>analogy</b>-based explanation and illustrate its potential usefulness by means of some examples.", "dateLastCrawled": "2022-01-10T12:40:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.1", "name": "CS 540 Lecture Notes: <b>Machine Learning</b>", "url": "http://pages.cs.wisc.edu/~dyer/cs540/notes/learning.html", "isFamilyFriendly": true, "displayUrl": "pages.cs.wisc.edu/~dyer/cs540/notes/<b>learning</b>.html", "snippet": "<b>Analogy</b> Determine correspondence between two different representations Discovery Unsupervised, specific goal not given Genetic Algorithms; Reinforcement Only feedback (positive or <b>negative</b> reward) given at end of a sequence of steps. Requires assigning reward to steps by solving the credit assignment problem--which steps should receive credit or blame for a final result? The Inductive <b>Learning</b> Problem. Extrapolate from a given set of examples so that we can make accurate predictions about ...", "dateLastCrawled": "2021-11-12T17:14:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.2", "name": "Word Embeddings, Analogies, and <b>Machine</b> <b>Learning</b>: Beyond king - man ...", "url": "https://aclanthology.org/C16-1332.pdf", "isFamilyFriendly": true, "displayUrl": "https://aclanthology.org/C16-1332.pdf", "snippet": "Word Embeddings, Analogies, and <b>Machine</b> <b>Learning</b>: Beyond King - Man + Woman = Queen Aleksandr Drozd y, Anna Gladkova z, Satoshi Matsuoka y yTokyo Institute of Technology, Meguro-ku, Tokyo 152-8550, Japan alex@smg.is.titech.ac.jp, matsu@is.titech.ac.jp z The University of Tokyo, Meguro-ku, Tokyo 153-8902 Japan gladkova@phiz.c.u-tokyo.ac.jp Abstract Solving word analogies became one of the most popular benchmarks for word embeddings on the assumption that linear relations between word pairs ...", "dateLastCrawled": "2022-01-20T00:57:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.3", "name": "<b>Machine</b> <b>Learning</b> \u2014 Multiclass <b>Classification</b> with Imbalanced Dataset ...", "url": "https://towardsdatascience.com/machine-learning-multiclass-classification-with-imbalanced-data-set-29f6a177c1a", "isFamilyFriendly": true, "displayUrl": "https://towardsdatascience.com/<b>machine</b>-<b>learning</b>-multi<b>class</b>-<b>classification</b>-with...", "snippet": "The skewed distribution makes many conventional <b>machine</b> <b>learning</b> algorithms less effective, especially in predicting minority <b>class</b> examples. In order to do so, let us first understand the problem at hand and then discuss the ways to overcome those. Multiclass <b>Classification</b>: A <b>classification</b> task with more than two classes; e.g., classify a set of images of fruits which may be oranges, apples, or pears. Multi-<b>class</b> <b>classification</b> makes the assumption that each sample is assigned to one and ...", "dateLastCrawled": "2022-02-02T22:23:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.4", "name": "A mind-boggling <b>analogy</b> between <b>machine</b> <b>learning</b> and quantum physics", "url": "https://www.hhyu.org/posts/fermion/", "isFamilyFriendly": true, "displayUrl": "https://www.hhyu.org/posts/fermion", "snippet": "A recent paper published in PNAS titled \u201cThe Fermi-Dirac distribution provides a calibrated probabilistic output for binary classifiers\u201d caught my attention, because it describes a surprising relationship between <b>machine</b> <b>learning</b> and quantum physics. In fact, surprising is an understatement. Mind-boggling is more like it. According to the <b>analogy</b> developed by the authors, positive samples in binary classification problems are like&amp;mldr; fermions?!", "dateLastCrawled": "2022-01-23T02:15:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.5", "name": "<b>machine</b> <b>learning</b> - What if I train a classifier with only positive ...", "url": "https://stats.stackexchange.com/questions/237538/what-if-i-train-a-classifier-with-only-positive-example", "isFamilyFriendly": true, "displayUrl": "https://stats.stackexchange.com/questions/237538/what-if-i-train-a-<b>class</b>ifier-with...", "snippet": "What is the necessity of using even small amount of <b>negative</b> <b>class</b> or unlabelled examples? Using <b>analogy</b> for explanation is much appreciated. Using <b>analogy</b> for explanation is much appreciated. <b>machine</b>-<b>learning</b> classification one-<b>class</b>", "dateLastCrawled": "2022-01-20T10:08:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.6", "name": "Support Vector <b>Machine</b> (SVM) Algorithm. | by Nadeem | MLearning.ai | Medium", "url": "https://medium.com/mlearning-ai/support-vector-machine-svm-algorithm-a5acaa48fe3a", "isFamilyFriendly": true, "displayUrl": "https://medium.com/m<b>learning</b>-ai/support-vector-<b>machine</b>-svm-algorithm-a5acaa48fe3a", "snippet": "X +b \u2265 \u00b11 (where the value of Yi is \u00b11, +1 for positive <b>class</b> and -1 for <b>negative</b> <b>class</b>). W^T is the vector perpendicular to the hyperplane referred to as the weight vector. The above equation ...", "dateLastCrawled": "2022-01-26T23:56:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.7", "name": "<b>machine</b> <b>learning</b> - Can the value of <b>information gain</b> be <b>negative</b> ...", "url": "https://stackoverflow.com/questions/3289589/can-the-value-of-information-gain-be-negative", "isFamilyFriendly": true, "displayUrl": "https://<b>stackoverflow.com</b>/questions/3289589", "snippet": "Now there exist no possible split of <b>class</b> values that will generate a case with an even worse purity (higher entropy) than before splitting. Take this simple example of a binary classification problem. At a certain node we have 5 positive instances and 4 <b>negative</b> ones (total of 9). Therefore the entropy (before the split) is:", "dateLastCrawled": "2022-01-27T15:45:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.8", "name": "What is the best example for <b>false negative, false positive, true</b> ...", "url": "https://www.quora.com/What-is-the-best-example-for-false-negative-false-positive-true-negative-and-true-positive-in-machine-learning", "isFamilyFriendly": true, "displayUrl": "https://www.quora.com/What-is-the-best-example-for-<b>false-negative-false-positive-true</b>...", "snippet": "Answer (1 of 6): There was a funny picture I\u2019d come across a while ago [1]: Extending this example, a man whose test results say \u201cNot pregnant\u201d is True <b>Negative</b>, and a pregnant woman whose test results say \u201cPregnant\u201d is True Positive. A good way to understand it is this: * First, define what...", "dateLastCrawled": "2022-01-22T02:20:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.9", "name": "<b>All Unit MCQ questions of ML</b> \u2013 TheCodingShef", "url": "https://thecodingshef.com/all-unit-mcq-questions-of-machine-learning/", "isFamilyFriendly": true, "displayUrl": "https://thecodingshef.com/<b>all-unit-mcq-questions-of</b>-<b>machine</b>-<b>learning</b>", "snippet": "<b>Learning</b> to play world-<b>class</b> backgammon; All of the above Correct option is E. Which of the following does not include different <b>learning</b> methods; <b>Analogy</b>; Introduction; Memorization; Deduction Correct option is B. In language understanding, the levels of knowledge that does not include? Empirical; Logical; Phonological; Syntactic Correct option is A. Designing a <b>machine</b> <b>learning</b> approach involves:-Choosing the type of training experience; Choosing the target function to be learned; Choosing ...", "dateLastCrawled": "2022-01-30T22:09:00.0000000Z", "language": "en", "isNavigational": false}], [], [], [], [], []], "all_bing_queries": ["+(negative class)  is like +(sorting a deck of cards)", "+(negative class) is similar to +(sorting a deck of cards)", "+(negative class) can be thought of as +(sorting a deck of cards)", "+(negative class) can be compared to +(sorting a deck of cards)", "machine learning +(negative class AND analogy)", "machine learning +(\"negative class is like\")", "machine learning +(\"negative class is similar\")", "machine learning +(\"just as negative class\")", "machine learning +(\"negative class can be thought of as\")", "machine learning +(\"negative class can be compared to\")"]}
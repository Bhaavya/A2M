{"src_spec_res": [[{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "name": "<b>Minimax</b> Algorithm. When we play games <b>like</b> <b>chess</b>, tic tac\u2026 | by Rediet ...", "url": "https://rediet-abere.medium.com/minimax-algorithm-aa1457521fc7", "isFamilyFriendly": true, "displayUrl": "https://rediet-abere.medium.com/<b>minimax</b>-algorithm-aa1457521fc7", "snippet": "When we play games <b>like</b> <b>chess</b>, tic tac toe, or mancala against a computer, the computer can make its move by using a decision tree AKA a <b>game</b> tree. This tree follows a set of instructions known as the <b>Minimax</b> Algorithm. Take a look at a compacted definition from Wikipedia: <b>Minimax</b> is a decision rule used for minimizing the possible <b>loss</b> for a worst case (maximum <b>loss</b>) scenario. Originally formulated for two-player zero-sum <b>game</b> theory, covering both the cases where players take alternate ...", "dateLastCrawled": "2022-01-20T08:28:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.1", "name": "What Type Of Algorithm Is <b>Minimax</b>? \u2013 chetumenu.com", "url": "https://chetumenu.com/what-type-of-algorithm-is-minimax/", "isFamilyFriendly": true, "displayUrl": "https://chetumenu.com/what-type-of-algorithm-is-<b>minimax</b>", "snippet": "<b>Minimax</b> is a strategy of always minimizing the maximum possible <b>loss</b> which can result from a choice that a player makes. What is MIN MAX algorithm used for? Min-Max algorithm is mostly used for <b>game</b> playing in AI. Such as <b>Chess</b>, Checkers, tic-tac-toe, go, and various tow-players <b>game</b>. This Algorithm computes the <b>minimax</b> decision for the current ...", "dateLastCrawled": "2022-01-22T12:12:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.2", "name": "How <b>Chess</b> <b>Algorithm</b> Works?. <b>Chess</b> is a two-player strategy board\u2026 | by ...", "url": "https://medium.com/analytics-vidhya/how-chess-algorithm-works-69e8ae165323", "isFamilyFriendly": true, "displayUrl": "https://medium.com/analytics-vidhya/how-<b>chess</b>-<b>algorithm</b>-works-69e8ae165323", "snippet": "<b>Minimax</b> is a decision rule used in artificial intelligence, decision theory, <b>game</b> theory, statistics, and philosophy for minimizing the possible <b>loss</b> for a worst case (maximum <b>loss</b>) scenario. When ...", "dateLastCrawled": "2022-01-25T00:54:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.3", "contractualRules": [{"_type": "ContractualRules/LicenseAttribution", "targetPropertyName": "snippet", "targetPropertyIndex": 3, "mustBeCloseToContent": true, "license": {"name": "CC-BY-SA", "url": "http://creativecommons.org/licenses/by-sa/3.0/"}, "licenseNotice": "Text under CC-BY-SA license"}], "name": "<b>Minimax</b> - <b>Wikipedia</b>", "url": "https://en.wikipedia.org/wiki/Minimax", "isFamilyFriendly": true, "displayUrl": "https://<b>en.wikipedia.org</b>/wiki/<b>Minimax</b>", "snippet": "<b>Minimax</b> (sometimes MinMax, MM or saddle point) is a decision rule used in artificial intelligence, decision theory, <b>game</b> theory, statistics, and philosophy for minimizing the possible <b>loss</b> for a worst case (maximum <b>loss</b>) scenario.When dealing with gains, it is referred to as &quot;maximin&quot;\u2014to maximize the minimum gain. Originally formulated for n-player zero-sum <b>game</b> theory, covering both the cases where players take alternate moves and those where they make simultaneous moves, it has also been ...", "dateLastCrawled": "2022-02-03T03:19:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.4", "name": "<b>Minimax</b> - Chessprogramming wiki", "url": "https://www.chessprogramming.org/Minimax", "isFamilyFriendly": true, "displayUrl": "https://www.<b>chess</b>programming.org/<b>Minimax</b>", "snippet": "<b>Minimax</b>, an algorithm used to determine the score in a zero-sum <b>game</b> after a certain number of moves, with best play according to an evaluation function. The algorithm can be explained <b>like</b> this: In a one-ply search, where only move sequences with length one are examined, the side to move (max player) can simply look at the evaluation after playing all possible moves.The move with the best evaluation is chosen. But for a two-ply search, when the opponent also moves, things become more ...", "dateLastCrawled": "2022-01-31T07:00:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.5", "name": "<b>Minimax</b> - SlideShare", "url": "https://www.slideshare.net/infobuzz/minimax-5805895", "isFamilyFriendly": true, "displayUrl": "https://www.slideshare.net/infobuzz/<b>minimax</b>-5805895", "snippet": "<b>Minimax</b> is a procedure used for minimizing the possible <b>loss</b> while maximizing the potential gain Originally formulated for two player <b>game</b> To be simpler Considering for two player games, the players are referred to as MAX (the player) and MIN( the opponent). MAX is the player trying to maximize its score and MIN is the opponent trying to minimize MAX\u2019s score. 6. Let me have two players MAX and MIN BASIS : Assume opponent best move TASK : To find a \u201cbest\u201d move for MAX ASSUME : MAX moves ...", "dateLastCrawled": "2022-02-01T03:38:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.6", "name": "<b>Minimax Algorithm Guide: How to Create</b> an Unbeatable AI", "url": "https://www.freecodecamp.org/news/minimax-algorithm-guide-how-to-create-an-unbeatable-ai/", "isFamilyFriendly": true, "displayUrl": "https://www.freecodecamp.org/news/<b>minimax-algorithm-guide-how-to-create</b>-an-unbeatable-ai", "snippet": "Figure 1: The <b>game</b> tree of a concluding tic-tac-toe <b>game</b>. Our focus in this guide is to use <b>minimax</b> to create an unbeatable AI for a tic-tac-toe <b>game</b>. However, you can also use it for complex games, <b>like</b> <b>chess</b>, and general decision-making to resolve any uncertainties.", "dateLastCrawled": "2022-01-26T04:14:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.7", "name": "Optimizing Decision-making with the <b>Minimax</b> AI algorithm | by Shukant ...", "url": "https://medium.com/swlh/optimizing-decision-making-with-the-minimax-ai-algorithm-69cce500c6d6", "isFamilyFriendly": true, "displayUrl": "https://medium.com/swlh/optimizing-decision-making-with-the-<b>minimax</b>-ai-algorithm-69cce...", "snippet": "This algorithm is useful in decision-making AI, which is used in popular <b>game</b> engines, <b>like</b> Stockfish for <b>Chess</b>. A major limitation of <b>Minimax</b> is that it is only used in two-player games.", "dateLastCrawled": "2022-01-30T12:46:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.8", "name": "<b>Minimax Improvements</b> - blog.theofekfoundation.org", "url": "https://blog.theofekfoundation.org/artificial-intelligence/2015/12/18/minimax-improvements/", "isFamilyFriendly": true, "displayUrl": "https://blog.theofekfoundation.org/artificial-intelligence/2015/12/18/<b>minimax-improvements</b>", "snippet": "<b>Minimax Improvements</b>. In the last post we discussed the implementation of <b>Minimax</b> for <b>game</b> AIs, specifically with Gomoku.In this post, we\u2019ll cover general improvements for <b>minimax</b> that can be made. While they might not all apply to all games, they may apply to general zero-sum games, <b>like</b> <b>chess</b>, connect four, checkers, etc\u2026Note that most of these improvements are very <b>game</b>-specific.. Irrelevant Moves", "dateLastCrawled": "2022-01-11T10:16:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.9", "name": "<b>GitHub</b> - <b>rjhunjhunwala/Chess</b>: <b>Minimax</b> + Alpha-Beta pruning <b>chess</b> AI", "url": "https://github.com/rjhunjhunwala/Chess", "isFamilyFriendly": true, "displayUrl": "https://<b>github.com</b>/<b>rjhunjhunwala/Chess</b>", "snippet": "For a trivial <b>game</b> the <b>game</b>-tree might have a very small complexity, formally, we define the &quot;<b>game</b>-tree-complexity&quot; to be the number of &quot;leaf-nodes&quot; in the tree. Therefore for tic-tac-toe, since the <b>game</b>-tree is trivially small, we define a win to have value one, a draw to have value zero and a <b>loss</b> to have value one. Assuming &quot;perfect-play&quot; we then create a recursive definition of the &quot;value&quot; of a node, as being the value of the best child node iff, it&#39;s the computers turn, and the worst ...", "dateLastCrawled": "2021-08-27T14:17:00.0000000Z", "language": "en", "isNavigational": false}], [{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "contractualRules": [{"_type": "ContractualRules/LicenseAttribution", "targetPropertyName": "snippet", "targetPropertyIndex": 0, "mustBeCloseToContent": true, "license": {"name": "CC-BY-SA", "url": "http://creativecommons.org/licenses/by-sa/3.0/"}, "licenseNotice": "Text under CC-BY-SA license"}], "name": "<b>Minimax</b> - <b>Wikipedia</b>", "url": "https://en.wikipedia.org/wiki/Minimax", "isFamilyFriendly": true, "displayUrl": "https://<b>en.wikipedia.org</b>/wiki/<b>Minimax</b>", "snippet": "<b>Minimax</b> (sometimes MinMax, MM or saddle point) is a decision rule used in artificial intelligence, decision theory, <b>game</b> theory, statistics, and philosophy for minimizing the possible <b>loss</b> for a worst case (maximum <b>loss</b>) scenario.When dealing with gains, it is referred to as &quot;maximin&quot;\u2014to maximize the minimum gain. Originally formulated for n-player zero-sum <b>game</b> theory, covering both the cases where players take alternate moves and those where they make simultaneous moves, it has also been ...", "dateLastCrawled": "2022-02-03T03:19:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.1", "name": "Why <b>Minimax</b> Works: An Alternative Explanation", "url": "https://dis.ijs.si/MitjaL/documents/Why_Minimax_Works-IJCAI-05.pdf", "isFamilyFriendly": true, "displayUrl": "https://dis.ijs.si/MitjaL/documents/Why_<b>Minimax</b>_Works-IJCAI-05.pdf", "snippet": "be a <b>loss</b>, a win and perhaps a draw (<b>chess</b>, checkers etc.), multiple values might seem to be useful only as a way to express the uncertainty of a program or human. However, even given unlimited resources to determine the value of a position, in a losing position, the best one can do against a fallible and not fully known opponent is evaluate the position in terms of the probability of <b>loss</b>. In a winning position, even a perfect two-valued evaluation function could maintain a won position ...", "dateLastCrawled": "2021-11-07T13:04:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.2", "name": "<b>Simulation and AI: the Minimax strategy analysis</b> - <b>Moreware Blog</b>", "url": "https://www.moreware.org/wp/blog/2019/10/25/simulation-and-ai-the-minimax-strategy-analysis/", "isFamilyFriendly": true, "displayUrl": "https://www.moreware.org/wp/blog/2019/10/25/<b>simulation-and-ai-the-minimax</b>-strategy...", "snippet": "<b>Minimax</b> is a method to minimize the maximum (<b>minimax</b>) possible <b>loss</b>; alternatively, to maximize the minimum gain (maximin). It was discovered in <b>game</b> theory in the case of zero-sum <b>game</b> with two players, both in the case of alternative moves (turns) and simultaneous moves, later being extended to more complex games and decision support in the presence of uncertainty.", "dateLastCrawled": "2022-01-06T00:40:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.3", "name": "An Exhaustive Explanation of <b>Minimax</b>", "url": "https://www.cs.swarthmore.edu/~mitchell/classes/cs63/f20/reading/minimax.html", "isFamilyFriendly": true, "displayUrl": "https://www.cs.swarthmore.edu/~mitchell/classes/cs63/f20/reading/<b>minimax</b>.html", "snippet": "The <b>minimax</b> algorithm is used to determine which moves a computer player makes in games like tic-tac-toe, checkers, othello, and <b>chess</b>. These kinds of games are called games of perfect information because it is possible to see all potential moves. A <b>game</b> like scrabble is not a <b>game</b> of perfect information because there&#39;s no way to predict your opponent&#39;s moves because you can&#39;t see her hand.", "dateLastCrawled": "2021-12-31T09:04:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.4", "name": "<b>Game</b> Playing - <b>Chess</b> &amp; Checkers, <b>Minimax</b> and Alpha Beta cutoff", "url": "https://www.openbookproject.net/py4fun/minimax/minimax.html", "isFamilyFriendly": true, "displayUrl": "https://www.openbookproject.net/py4fun/<b>minimax</b>/<b>minimax</b>.html", "snippet": "<b>Game</b> Playing - <b>Chess</b> &amp; Checkers: <b>Minimax</b> and Alpha Beta cutoff. Games like <b>chess</b> and checkers (droughts), and even the lowly tic-tac-toe (naughts and crosses) have a <b>similar</b> structure. There is board and <b>game</b> play alternates between two players who decide on (what they perceive) is their best move and take it. To do this they must each evaluate the board and find a move that makes the evaluation more favorable for them. There is no rolling of dice or other element of chance. Each <b>game</b> has ...", "dateLastCrawled": "2022-01-31T10:12:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.5", "name": "<b>Minimax Algorithm in Game Theory</b> | Set 3 (Tic-Tac-Toe AI - Finding ...", "url": "https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-3-tic-tac-toe-ai-finding-optimal-move/", "isFamilyFriendly": true, "displayUrl": "https://www.geeksforgeeks.org/<b>minimax-algorithm-in-game-theory</b>-set-3-tic-tac-toe-ai...", "snippet": "<b>Minimax</b> : To check whether or not the current move is better than the best move we take the help of <b>minimax</b> () function which will consider all the possible ways the <b>game</b> can go and returns the best value for that move, assuming the opponent also plays optimally. The code for the maximizer and minimizer in the <b>minimax</b> () function <b>is similar</b> to ...", "dateLastCrawled": "2022-02-02T10:19:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.6", "name": "In: N-Person <b>Minimax</b> and Alpha-Beta Pruning. NICOGRAPH International ...", "url": "https://www.diva-portal.org/smash/get/diva2:761634/FULLTEXT01.pdf", "isFamilyFriendly": true, "displayUrl": "https://www.diva-portal.org/smash/get/diva2:761634/FULLTEXT01.pdf", "snippet": "As an example in <b>chess</b>, the heuristic utility function for player 1 could be de\ufb01ned as x= 1 2, where 1 is the sum of the heuristic values of the pieces for player 1 and 2 the corresponding sum for player 2. <b>Minimax</b> is, in the capacity of an exhaustive search (or brute force) method, an expensive algorithm for search in deep trees. Given the (average) branching factor b, <b>minimax</b> is O(bd) for search of depth d. It is possible to optimize the search speed of <b>minimax</b> by alpha-beta pruning (in ...", "dateLastCrawled": "2022-01-26T02:33:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.7", "name": "GitHub - divyanshuanand02/Noughts-Crosses: <b>Minimax</b> is a <b>Game</b> Theory ...", "url": "https://github.com/divyanshuanand02/Noughts-Crosses", "isFamilyFriendly": true, "displayUrl": "https://<b>github.com</b>/divyanshuanand02/Noughts-Crosses", "snippet": "<b>Minimax</b> : To check whether or not the current move is better than the best move we take the help of <b>minimax</b>() function which will consider all the possible ways the <b>game</b> can go and returns the best value for that move, assuming the opponent also plays optimally The code for the maximizer and minimizer in the <b>minimax</b>() function <b>is similar</b> to findBestMove(), the only difference is, instead of returning a move, it will return a value.Here is the pseudocode :", "dateLastCrawled": "2022-02-02T17:46:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.8", "name": "assessment id-27", "url": "https://nptel.ac.in/content/storage2/courses/downloads_new/112103280/Week_03_Assignment_3.pdf", "isFamilyFriendly": true, "displayUrl": "https://nptel.ac.in/content/storage2/courses/downloads_new/112103280/Week_03...", "snippet": "1) A zero-sum <b>game</b> is one where A. The payoff is never zero. B. One player&#39;s gain is the other p aye. <b>loss</b>. C. No one wins. D. None of the above No, the answer is incorrect. Score: 0 Accepted Answers: g. One players gan is the other player&#39;s <b>loss</b>. 2) The <b>minimax</b> rule backs up values from the children of a node. For a MAX node, it backs up the", "dateLastCrawled": "2022-02-03T03:37:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.9", "name": "<b>AI explanation: Alphazero vs Leela vs Stockfish</b> vs ...? : <b>chess</b>", "url": "https://www.reddit.com/r/chess/comments/a4pa29/ai_explanation_alphazero_vs_leela_vs_stockfish_vs/", "isFamilyFriendly": true, "displayUrl": "https://<b>www.reddit.com</b>/r/<b>chess</b>/comments/a4pa29/<b>ai_explanation_alphazero_vs_leela_vs</b>...", "snippet": "AlphaZero/Leela (these two are <b>similar</b>) use an algorithm known as the Monte Carlo Tree Search coupled with neural network help, whereas Stockfish (and most other <b>chess</b> engines) use a <b>minimax</b> algorithm. A <b>minimax</b> algorithm basically finds all the moves for a given position and goes through all of them to determine which one is the best. &#39;The ...", "dateLastCrawled": "2021-12-23T21:05:00.0000000Z", "language": "en", "isNavigational": false}], [{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "name": "Is <b>Minimax</b> Good For <b>Chess</b>? \u2013 ameliadanver.com", "url": "https://ameliadanver.com/is-minimax-good-for-chess/", "isFamilyFriendly": true, "displayUrl": "https://ameliadanver.com/is-<b>minimax</b>-good-for-<b>chess</b>", "snippet": "The <b>minimax</b> algorithm takes advantage of the fact that <b>chess</b> is a zero-sum <b>game</b>. Maximizing your chances of winning is the same as minimizing the opponent&#39;s chances of winning. Each turn <b>can</b> be seen as a player making a move to maximize the evaluation function while the other tries to minimize it. What modification to <b>minimax</b> procedure <b>can</b> be made to improve its performance? The method that we are going to look in this article is called alpha-beta pruning. If we apply alpha-beta pruning to a ...", "dateLastCrawled": "2022-02-01T10:07:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.1", "name": "<b>GitHub</b> - <b>rjhunjhunwala/Chess</b>: <b>Minimax</b> + Alpha-Beta pruning <b>chess</b> AI", "url": "https://github.com/rjhunjhunwala/Chess", "isFamilyFriendly": true, "displayUrl": "https://<b>github.com</b>/<b>rjhunjhunwala/Chess</b>", "snippet": "Ending states of the <b>game</b>, win/lose/draw, <b>can</b> <b>be thought</b> of as leafs, because they serve as terminal nodes of the tree, so formally, they are called leaf nodes. Conventionally, we call these tree a &quot;<b>game</b>-tree&quot;. For a trivial <b>game</b> the <b>game</b>-tree might have a very small complexity, formally, we define the &quot;<b>game</b>-tree-complexity&quot; to be the number of &quot;leaf-nodes&quot; in the tree. Therefore for tic-tac-toe, since the <b>game</b>-tree is trivially small, we define a win to have value one, a draw to have value ...", "dateLastCrawled": "2021-08-27T14:17:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.2", "contractualRules": [{"_type": "ContractualRules/LicenseAttribution", "targetPropertyName": "snippet", "targetPropertyIndex": 2, "mustBeCloseToContent": true, "license": {"name": "CC-BY-SA", "url": "http://creativecommons.org/licenses/by-sa/3.0/"}, "licenseNotice": "Text under CC-BY-SA license"}], "name": "<b>Minimax</b> | Psychology Wiki | Fandom", "url": "https://psychology.fandom.com/wiki/Minimax", "isFamilyFriendly": true, "displayUrl": "https://psychology.fandom.com/wiki/<b>Minimax</b>", "snippet": "<b>Minimax</b> (sometimes minmax) is a method in decision theory for minimizing the maximum possible <b>loss</b>.Alternatively, it <b>can</b> <b>be thought</b> of as maximizing the minimum gain (maximin).It started from two player zero-sum <b>game</b> theory, covering both the cases where players take alternate moves and those where they make simultaneous moves.It has also been extended to more complex games and to general decision making in the presence of uncertainty.", "dateLastCrawled": "2022-01-21T06:55:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.3", "name": "Optimizing Decision-making with the <b>Minimax</b> AI algorithm | by Shukant ...", "url": "https://medium.com/swlh/optimizing-decision-making-with-the-minimax-ai-algorithm-69cce500c6d6", "isFamilyFriendly": true, "displayUrl": "https://medium.com/swlh/optimizing-decision-making-with-the-<b>minimax</b>-ai-algorithm-69cce...", "snippet": "The <b>Minimax</b> algorithm <b>can</b> <b>be thought</b> of the computer playing against itself to find the best move! It follows the human <b>thought</b> process \u2014 if I do this move, what moves will my opponent have ...", "dateLastCrawled": "2022-01-30T12:46:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.4", "contractualRules": [{"_type": "ContractualRules/LicenseAttribution", "targetPropertyName": "snippet", "targetPropertyIndex": 4, "mustBeCloseToContent": true, "license": {"name": "CC-BY-SA", "url": "http://creativecommons.org/licenses/by-sa/3.0/"}, "licenseNotice": "Text under CC-BY-SA license"}], "name": "<b>Minimax</b> - <b>Wikipedia</b>", "url": "https://en.wikipedia.org/wiki/Minimax", "isFamilyFriendly": true, "displayUrl": "https://<b>en.wikipedia.org</b>/wiki/<b>Minimax</b>", "snippet": "<b>Minimax</b> (sometimes MinMax, MM or saddle point) is a decision rule used in artificial intelligence, decision theory, <b>game</b> theory, statistics, and philosophy for minimizing the possible <b>loss</b> for a worst case (maximum <b>loss</b>) scenario.When dealing with gains, it is referred to as &quot;maximin&quot;\u2014to maximize the minimum gain. Originally formulated for n-player zero-sum <b>game</b> theory, covering both the cases where players take alternate moves and those where they make simultaneous moves, it has also been ...", "dateLastCrawled": "2022-02-03T03:19:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.5", "name": "Von Neumann&#39;s <b>Minimax Theorem/ algorithm</b>", "url": "https://iq.opengenus.org/minimax-theorem-algorithm-von-neumann/", "isFamilyFriendly": true, "displayUrl": "https://iq.opengenus.org/<b>minimax-theorem-algorithm</b>-von-neumann", "snippet": "It is pretty much synonymous to our <b>thought</b> process when we play a <b>game</b> and ask ourselves the limits of our opponent&#39;s move when we make this move! Fun fact : <b>Minimax</b> is called so because it helps in minimizing the <b>loss</b> when the opponent choses the strategy inflicting maximum <b>loss</b> to us! <b>Minimax</b>, indeed ! <b>Minimax</b> in Tic-tac-toe. For understanding an intriguingly beautiful algorithm like <b>minimax</b>, we require an equally fun medium of portrayal of idea, and nothing <b>can</b> beat a simplisticly easy ...", "dateLastCrawled": "2022-01-04T10:34:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.6", "name": "<b>Game</b> Playing - <b>Chess</b> &amp; Checkers, <b>Minimax</b> and Alpha Beta cutoff", "url": "https://www.openbookproject.net/py4fun/minimax/minimax.html", "isFamilyFriendly": true, "displayUrl": "https://www.openbookproject.net/py4fun/<b>minimax</b>/<b>minimax</b>.html", "snippet": "Consider the following snapshot (what we&#39;ll call a <b>game</b>-node) of a <b>chess</b> <b>game</b>. These are found once a week in our local newspaper. It is white&#39;s turn to play and white <b>can</b> checkmate black in two moves (with just one move in between for black). <b>chess</b>.jpg. In evaluating the board manually you <b>can</b> see that white is already in a vastly superior position. Two bishops, a rook and pawn in just additional material strength. White also has an enormous number of possible moves. The rook alone <b>can</b> make ...", "dateLastCrawled": "2022-01-31T10:12:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.7", "name": "<b>Minimax</b> Alpha-Beta Pruning <b>Can</b> Obscure Losing Branches", "url": "https://www.ross.ws/?_writing/articles/Minimax%20Alpha-Beta%20Pruning%20Can%20Obscure%20Losing%20Branches", "isFamilyFriendly": true, "displayUrl": "https://www.ross.ws/?_writing/articles/<b>Minimax</b> Alpha-Beta Pruning <b>Can</b> Obscure Losing...", "snippet": "These connections <b>can</b> <b>be thought</b> of as &quot;branches&quot; forming what is termed the &quot;search tree&quot; of potential paths of future play. In a nutshell, <b>minimax</b> operates by considering all the legal moves available to whichever player whose turn it is at that node. For each one of those resulting nodes, it considers all the legal replies available to the opponent, and for each one of those, all the legal replies, etc. \u2014 as far down into the search tree as possible. <b>Minimax</b> looks forward into the <b>game</b> ...", "dateLastCrawled": "2022-01-20T10:24:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.8", "name": "<b>Playing Strategy Games With</b> The <b>Minimax</b> Algorithm", "url": "https://www.freecodecamp.org/news/playing-strategy-games-with-minimax-4ecb83b39b4b/", "isFamilyFriendly": true, "displayUrl": "https://www.freecodecamp.org/news/<b>playing-strategy-games-with</b>-<b>minimax</b>-4ecb83b39b4b", "snippet": "This requires strategy and some <b>thought</b> into how the <b>game</b> may turn out as it rolls along. Such games <b>can</b> evolve and produce an absurd amount of possible outcomes. So we need to think of how we <b>can</b> choose the best possible move, without spending the amount of time it took for cats to populate the Earth. Okay, no more cats! Mighty <b>Minimax</b> And Friends. Now that you know how to play Isolation, let\u2019s take a look at how we <b>can</b> use the <b>minimax</b> algorithm; a staple in the AI community. We\u2019ll also ...", "dateLastCrawled": "2022-02-03T01:22:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.9", "name": "If <b>minimax</b> is a method in decision theory for minimizing maximum <b>loss</b> ...", "url": "https://www.quora.com/If-minimax-is-a-method-in-decision-theory-for-minimizing-maximum-loss-what-is-the-algorithm-for-generating-the-maximum-possible-loss-called", "isFamilyFriendly": true, "displayUrl": "https://www.quora.com/If-<b>minimax</b>-is-a-method-in-decision-theory-for-minimizing-maximum...", "snippet": "Answer: This is actually the same algorithm so still <b>minimax</b>. Sometimes there are switched signs in implementation in between levels and it gets another name negamax. There is are a lot of improvements to search deep trees heuristically (alpha-beta, transposition tables \u2026) but it is another ques...", "dateLastCrawled": "2022-01-13T13:44:00.0000000Z", "language": "en", "isNavigational": false}], [{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "name": "Why <b>Minimax</b> Works: An Alternative Explanation", "url": "https://www.ijcai.org/Proceedings/05/Papers/1223.pdf", "isFamilyFriendly": true, "displayUrl": "https://www.ijcai.org/Proceedings/05/Papers/1223.pdf", "snippet": "In most research on the <b>minimax</b> pathology, true position values were losses or wins. This seems reasonable, since in games like <b>chess</b>, positions <b>can</b> indeed only be lost or won (or drawn). In practice, however, a <b>game</b> playing program needs an evaluation function that makes it possible to maintain a direction of play, gradually moving toward a", "dateLastCrawled": "2021-11-21T05:01:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.1", "contractualRules": [{"_type": "ContractualRules/LicenseAttribution", "targetPropertyName": "snippet", "targetPropertyIndex": 1, "mustBeCloseToContent": true, "license": {"name": "CC-BY-SA", "url": "http://creativecommons.org/licenses/by-sa/3.0/"}, "licenseNotice": "Text under CC-BY-SA license"}], "name": "<b>Minimax</b> - <b>Wikipedia</b>", "url": "https://en.wikipedia.org/wiki/Minimax", "isFamilyFriendly": true, "displayUrl": "https://<b>en.wikipedia.org</b>/wiki/<b>Minimax</b>", "snippet": "<b>Minimax</b> (sometimes MinMax, MM or saddle point) is a decision rule used in artificial intelligence, decision theory, <b>game</b> theory, statistics, and philosophy for minimizing the possible <b>loss</b> for a worst case (maximum <b>loss</b>) scenario.When dealing with gains, it is referred to as &quot;maximin&quot;\u2014to maximize the minimum gain. Originally formulated for n-player zero-sum <b>game</b> theory, covering both the cases where players take alternate moves and those where they make simultaneous moves, it has also been ...", "dateLastCrawled": "2022-02-03T03:19:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.2", "name": "<b>Minimax Algorithm in Game Theory</b> | Set 3 (Tic-Tac-Toe AI - Finding ...", "url": "https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-3-tic-tac-toe-ai-finding-optimal-move/", "isFamilyFriendly": true, "displayUrl": "https://www.geeksforgeeks.org/<b>minimax-algorithm-in-game-theory</b>-set-3-tic-tac-toe-ai...", "snippet": "Remember this implementation of <b>minimax</b> algorithm <b>can</b> be applied any 2 player board <b>game</b> with some minor changes to the board structure and how we iterate through the moves. Also sometimes it is impossible for <b>minimax</b> to compute every possible <b>game</b> state for complex games like <b>Chess</b>. Hence we only compute upto a certain depth and use the evaluation function to calculate the value of the board.", "dateLastCrawled": "2022-02-02T10:19:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.3", "name": "<b>Minimax</b> - HandWiki", "url": "https://handwiki.org/wiki/Minimax", "isFamilyFriendly": true, "displayUrl": "https://handwiki.org/wiki/<b>Minimax</b>", "snippet": "<b>Minimax</b> (sometimes MinMax, MM or saddle point) is a decision rule used in artificial intelligence, decision theory, <b>game</b> theory, statistics, and philosophy for minimizing the possible <b>loss</b> for a worst case (maximum <b>loss</b>) scenario.When dealing with gains, it is referred to as &quot;maximin&quot;\u2014to maximize the minimum gain. Originally formulated for n-player zero-sum <b>game</b> theory, covering both the cases where players take alternate moves and those where they make simultaneous moves, it has also been ...", "dateLastCrawled": "2021-12-30T12:21:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.4", "name": "How <b>Chess</b> Is Solved Using AI - by Vinay Kumar Paspula", "url": "https://vinaypaspula.substack.com/p/how-chess-was-solved-using-ai-baa9b6fe2af0", "isFamilyFriendly": true, "displayUrl": "https://vinaypaspula.substack.com/p/how-<b>chess</b>-was-solved-using-ai-baa9b6fe2af0", "snippet": "The first few moves in a <b>Chess</b> <b>game</b> are important to help establish good board position. For this reason, many <b>Chess</b> systems employ a database of opening moves for a given strategy that <b>can</b> be linearly searched. <b>Minimax</b> Search with Alpha-Beta Pruning. <b>Chess</b> systems typically use a modified version of <b>game</b>-tree search by performing only a shallow search of the <b>game</b> tree using <b>minimax</b> with alpha- beta pruning. While not intuitive, moves that result in smaller scores (gain or <b>loss</b>) are ...", "dateLastCrawled": "2022-01-16T08:32:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.5", "name": "<b>Minimax</b> Algorithm with <b>Alpha-beta pruning</b> - HackerEarth Blog", "url": "https://www.hackerearth.com/blog/developers/minimax-algorithm-alpha-beta-pruning/", "isFamilyFriendly": true, "displayUrl": "https://www.hackerearth.com/blog/developers/<b>minimax</b>-algorithm-<b>alpha-beta-pruning</b>", "snippet": "Utility function: It is a function which assigns a numeric value for the outcome of a <b>game</b>. For instance, in <b>chess</b> or tic-tac-toe, the outcome is either a win, a <b>loss</b>, or a draw, and these <b>can</b> be represented by the values +1, -1, or 0, respectively. There are games that have a much larger range of possible outcomes; for instance, the utilities ...", "dateLastCrawled": "2022-02-02T12:22:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.6", "name": "GitHub - divyanshuanand02/Noughts-Crosses: <b>Minimax</b> is a <b>Game</b> Theory ...", "url": "https://github.com/divyanshuanand02/Noughts-Crosses", "isFamilyFriendly": true, "displayUrl": "https://<b>github.com</b>/divyanshuanand02/Noughts-Crosses", "snippet": "The <b>game</b> is so simple that we <b>can</b> generate the entire <b>game</b> tree without trouble, whereas in <b>chess</b> there are already 69,352,859,712,417 possible games that could\u2019ve been played after just 10 moves. What is <b>Minimax</b>. <b>Minimax</b> is a type of adversarial search algorithm for generating and exploring <b>game</b> trees. It is mostly used to solve zero-sum ...", "dateLastCrawled": "2022-02-02T17:46:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.7", "name": "<b>Minimax</b> algorithm and alpha-beta pruning | Mathspp", "url": "https://mathspp.com/blog/minimax-algorithm-and-alpha-beta-pruning", "isFamilyFriendly": true, "displayUrl": "https://mathspp.com/blog/<b>minimax</b>-algorithm-and-alpha-beta-pruning", "snippet": "The algorithm would be able to stop if 5 were already too large when <b>compared</b> to ? because, in that case, the minimiser node would know that going left is always better. Therefore, ? has to be greater than 5: The left terminal has to be greater than 5. If you <b>can</b>&#39;t see why, imagine that the terminal node is less than 5. For example, imagine it&#39;s 4. Then convince yourself that, in that case, the algorithm could stop as soon as the 5 is hit. Alright, so if the left terminal is greater than 5 ...", "dateLastCrawled": "2022-01-30T08:30:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.8", "name": "If <b>minimax</b> is a method in decision theory for minimizing maximum <b>loss</b> ...", "url": "https://www.quora.com/If-minimax-is-a-method-in-decision-theory-for-minimizing-maximum-loss-what-is-the-algorithm-for-generating-the-maximum-possible-loss-called", "isFamilyFriendly": true, "displayUrl": "https://www.quora.com/If-<b>minimax</b>-is-a-method-in-decision-theory-for-minimizing-maximum...", "snippet": "Answer: This is actually the same algorithm so still <b>minimax</b>. Sometimes there are switched signs in implementation in between levels and it gets another name negamax. There is are a lot of improvements to search deep trees heuristically (alpha-beta, transposition tables \u2026) but it is another ques...", "dateLastCrawled": "2022-01-13T13:44:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.9", "name": "Strategy for playing a board <b>game</b> with <b>Minimax</b> algorithm - Artificial ...", "url": "https://ai.stackexchange.com/questions/25427/strategy-for-playing-a-board-game-with-minimax-algorithm", "isFamilyFriendly": true, "displayUrl": "https://ai.stackexchange.com/.../strategy-for-playing-a-board-<b>game</b>-with-<b>minimax</b>-algorithm", "snippet": "I&#39;m not familiar with your <b>game</b> so I <b>can</b>&#39;t tell you what a good heuristic woul be in your specific case, but I <b>can</b> give you some advice on how to look for a good heuristic function. As a rule of thumb, the heuristic function for a <b>MiniMax</b> algorithm is best kept simple and efficient, so you <b>can</b> get deeper into the tree. But it depends on how costly it is to compute the heuristic function <b>compared</b> to simulating moves in the <b>game</b>. If the heuristic takes longer than simulating a <b>game</b> move, it ...", "dateLastCrawled": "2022-01-24T12:10:00.0000000Z", "language": "en", "isNavigational": false}]], "gen_res": [[{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "name": "Understanding the 3 most common <b>loss</b> functions for <b>Machine</b> <b>Learning</b> ...", "url": "https://towardsdatascience.com/understanding-the-3-most-common-loss-functions-for-machine-learning-regression-23e0ef3e14d3", "isFamilyFriendly": true, "displayUrl": "https://towardsdatascience.com/understanding-the-3-most-common-<b>loss</b>-functions-for...", "snippet": "A <b>loss function</b> in <b>Machine</b> <b>Learning</b> is a measure of how accurately your ML model is able to predict the expected outcome i.e the ground truth. The <b>loss function</b> will take two items as input: the output value of our model and the ground truth expected value. The output of the <b>loss function</b> is called the <b>loss</b> which is a measure of how well our model did at predicting the outcome. A high value for the <b>loss</b> means our model performed very poorly. A low value for the <b>loss</b> means our model performed ...", "dateLastCrawled": "2022-02-02T13:52:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.1", "name": "<b>Machine</b> <b>Learning</b> Concepts for Revision | by Raunak Sarada | Medium", "url": "https://raunaksarada-cse21.medium.com/machine-learning-concepts-for-revision-491384952d27", "isFamilyFriendly": true, "displayUrl": "https://raunaksarada-cse21.medium.com/<b>machine</b>-<b>learning</b>-concepts-for-revision-491384952d27", "snippet": "ML Concepts. A.I \u2014 Intelligence showed by machines which is common for humans <b>Machine</b> <b>Learning</b>- Recognize the pattern in data and automatically learn and improve through experience without explicitly being programmed Deep <b>Learning</b>- branch of <b>machine</b> <b>learning</b>.We have to deal with lots of data so in that case problems can\u2019t be solved with simple ML algorithms.", "dateLastCrawled": "2022-01-25T20:58:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.2", "name": "Generative Adversarial Networks (GANs) - TJ <b>Machine</b> <b>Learning</b>", "url": "https://tjmachinelearning.com/lectures/1920/guest/Generative_Adversarial_Networks.pdf", "isFamilyFriendly": true, "displayUrl": "https://tj<b>machinelearning</b>.com/lectures/1920/guest/Generative_Adversarial_Networks.pdf", "snippet": "Figure 1: <b>Minimax</b> objective function Density Models follow a stochastic approach. To simplify, Explicit Density models pick a random variable and then compare that random variable\u2019s value in the data provided (e.g. plotting the degree that some images are green) and then tries to learn a function to estimate this nature. Implicit models, aim to generate samples to mimic the given &quot;real&quot; data (training data). 3 Concept Generative Adversarial Networks are currently the state-of-the-art ...", "dateLastCrawled": "2021-08-25T21:59:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.3", "name": "<b>Machine</b> <b>Learning</b> \u2013 KejiTech", "url": "https://davideliu.com/category/machine-learning/", "isFamilyFriendly": true, "displayUrl": "https://davideliu.com/category/<b>machine</b>-<b>learning</b>", "snippet": "Challenges of <b>machine</b> <b>learning</b> <b>Machine</b> <b>learning</b> is a complex field that borrows elements from different areas such as computer science, algebra and statistics. Hence, it is not immediate, even for experts in the field, to build strong <b>machine</b> <b>learning</b> models to solve predefined task. Furthermore, those models should also be optimized with a time-consuming and repetitive hyper-parameters search in order to find the best set \u2026", "dateLastCrawled": "2022-01-09T10:45:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.4", "name": "Generative Adversarial Networks (GAN)", "url": "https://www.davidinouye.com/course/ece57000-fall-2021/lectures/gans.pdf", "isFamilyFriendly": true, "displayUrl": "https://www.davidinouye.com/course/ece57000-fall-2021/lectures/gans.pdf", "snippet": "GAN objective mathematics: Competitive game between two players <b>Minimax</b>: \u201cMinimize the worst case(max) <b>loss</b>\u201d Counterfeiter goal: \u201cMinimize chance of getting caught", "dateLastCrawled": "2022-01-14T17:34:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.5", "name": "Understanding Generative Adversarial Networks (GANs) | by Joseph Rocca ...", "url": "https://towardsdatascience.com/understanding-generative-adversarial-networks-gans-cd6e4651a29", "isFamilyFriendly": true, "displayUrl": "https://towardsdatascience.com/understanding-generative-adversarial-networks-<b>gan</b>s-cd6e...", "snippet": "This way to twist the <b>loss</b> function to go from a direct comparison to an indirect one is really something that can be very inspiring for further works in the deep <b>learning</b> area. To conclude, let\u2019s say that we don\u2019t know if the idea of GANs is really \u201cthe most interesting idea in the last 10 years in <b>Machine</b> <b>Learning</b>\u201d\u2026 but it\u2019s pretty obvious that it is, at least, one of the most interesting!", "dateLastCrawled": "2022-02-03T05:20:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.6", "name": "<b>Modified GANs</b> | Columbia Advanced <b>Machine</b> <b>Learning</b> Seminar", "url": "https://casmls.github.io/general/2017/02/23/modified-gans.html", "isFamilyFriendly": true, "displayUrl": "https://casmls.github.io/general/2017/02/23/<b>modified-gans</b>.html", "snippet": "Columbia Advanced <b>Machine</b> <b>Learning</b> Seminar. About Links Papers Schedule <b>Modified GANs</b> ... In a GAN framework, the problem is formulated as a <b>minimax</b> game between a generator function G, and a discriminator function D. The classic <b>analogy</b> for this is that of a counterfeiter and a policeman. The policeman (D) tries to maximize his ability to distinguish between counterfeit products and real products, while the counterfeiter (G) simultaneously tries to produce material that is as close to the ...", "dateLastCrawled": "2021-12-29T11:46:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.7", "name": "Understanding <b>Gradient Descent with Python</b>", "url": "https://rubikscode.net/2021/06/28/ml-optimization-pt-1-gradient-descent-with-python/", "isFamilyFriendly": true, "displayUrl": "https://rubikscode.net/2021/06/28/ml-optimization-pt-1-<b>gradient-descent-with-python</b>", "snippet": "In general, every <b>machine</b> <b>learning</b> algorithm is composed of three integral parts: A <b>loss</b> function.; Optimization criteria based on the <b>loss</b> function, like a cost function.; Optimization technique \u2013 this process leverages training data to find a solution for optimization criteria (cost function).; As you were able to see in previous articles, some algorithms were created intuitively and didn\u2019t have optimization criteria in mind.", "dateLastCrawled": "2022-02-02T07:26:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.8", "name": "<b>Machine Learning Gist</b> \u00b7 GitHub", "url": "https://gist.github.com/sgoyal1012/b30d70d12b6efad88bb285e8e709b161", "isFamilyFriendly": true, "displayUrl": "https://gist.github.com/sgoyal1012/b30d70d12b6efad88bb285e8e709b161", "snippet": "Orthogonalization - Adjust one knob to adjust one parameter, to solve one problem - The TV knob <b>analogy</b> and the car <b>analogy</b>. Chain of assumptions in <b>Machine</b> <b>Learning</b> and different knobs to say improve performance on train/dev set. Andrew Ng does not recommend Early stopping, as it is a knob that affects multiple thing at once. Setting up your goal", "dateLastCrawled": "2022-01-29T03:42:00.0000000Z", "language": "en", "isNavigational": false}, {"id": "https://api.bing.microsoft.com/api/v7/#WebPages.9", "name": "Transforming Medicine and Healthcare through <b>Machine</b> <b>Learning</b> and AI", "url": "https://www.lshtm.ac.uk/sites/default/files/2019-12/csm-seminar-slides-and-audio-transforming-medicine-and-healthcare.pdf", "isFamilyFriendly": true, "displayUrl": "https://www.lshtm.ac.uk/sites/default/files/2019-12/csm-seminar-slides-and-audio...", "snippet": "through <b>Machine</b> <b>Learning</b> and AI Mihaela van der Schaar John Humphrey Plummer Professor of <b>Machine</b> <b>Learning</b>, Artificial Intelligence and Medicine University of Cambridge Alan Turing Institute. ML-AIM Group aims to transform medicine and healthcare by developing new methods in <b>Machine</b> <b>Learning</b> &amp; Artificial Intelligence. The 5 Challenges of Personalized Medicine and Healthcare 1. Lifestyle optimization and disease prevention 2. Disease detection and prediction of disease progression ...", "dateLastCrawled": "2021-11-20T00:35:00.0000000Z", "language": "en", "isNavigational": false}], [], [{"id": "https://api.bing.microsoft.com/api/v7/#WebPages.0", "name": "(PDF) Using Latent Codes for Class Imbalance Problem in Unsupervised ...", "url": "https://www.researchgate.net/publication/335926235_Using_Latent_Codes_for_Class_Imbalance_Problem_in_Unsupervised_Domain_Adaptation", "isFamilyFriendly": true, "displayUrl": "https://www.researchgate.net/publication/335926235_Using_Latent_Codes_for_Class...", "snippet": "PDF | We address the problem of severe class imbalance in unsupervised domain adaptation, when the class spaces in source and target domains diverge... | Find, read and cite all the research you ...", "dateLastCrawled": "2021-11-14T06:28:00.0000000Z", "language": "en", "isNavigational": false}], [], [], []], "all_bing_queries": ["+(minimax loss)  is like +(game of chess)", "+(minimax loss) is similar to +(game of chess)", "+(minimax loss) can be thought of as +(game of chess)", "+(minimax loss) can be compared to +(game of chess)", "machine learning +(minimax loss AND analogy)", "machine learning +(\"minimax loss is like\")", "machine learning +(\"minimax loss is similar\")", "machine learning +(\"just as minimax loss\")", "machine learning +(\"minimax loss can be thought of as\")", "machine learning +(\"minimax loss can be compared to\")"]}